{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/fedlab/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/fedlab/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/fedlab/source/css/fedlab.scss","path":"css/fedlab.scss","modified":1,"renderable":1},{"_id":"themes/fedlab/source/img/article_default.gif","path":"img/article_default.gif","modified":1,"renderable":1},{"_id":"themes/fedlab/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/fedlab/source/js/index.js","path":"js/index.js","modified":1,"renderable":1},{"_id":"themes/fedlab/source/img/banner.jpg","path":"img/banner.jpg","modified":1,"renderable":1},{"_id":"themes/fedlab/source/img/icons/clear.png","path":"img/icons/clear.png","modified":1,"renderable":1},{"_id":"themes/fedlab/source/img/icons/search.png","path":"img/icons/search.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1506696834000},{"_id":"themes/fedlab/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1506645971000},{"_id":"themes/fedlab/_config.yml","hash":"1b47d4eabdfa2eceaa38c022cf4e1d08de5429d3","modified":1506614392000},{"_id":"source/_posts/煦涵说Babel.md","hash":"02947fb2a5461cb097eee4017b05d586d8abd5b4","modified":1506698583000},{"_id":"source/_posts/煦涵说Flow.md","hash":"613ed59f2b6f940bcf26d0b75b7c22e16811b1b4","modified":1506698817000},{"_id":"source/_posts/煦涵说JSON.md","hash":"a9705a93c679dde2a56368e348b0c2ef052fab7f","modified":1506698829000},{"_id":"source/_posts/煦涵说Webpack-IE低版本兼容.md","hash":"6f61193ba82ca09c32b407dbbcf237cf91c6c21f","modified":1506698925000},{"_id":"source/_posts/煦涵说Yarn.md","hash":"e691ebbb65ba705742ba2f6495c760e0062615c7","modified":1506698855000},{"_id":"themes/fedlab/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1506384093000},{"_id":"themes/fedlab/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1506384093000},{"_id":"themes/fedlab/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1506440546000},{"_id":"themes/fedlab/layout/layout.ejs","hash":"61dc9980869f3996145cb6f058a31600c3237758","modified":1506734494000},{"_id":"themes/fedlab/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1506384093000},{"_id":"themes/fedlab/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1506384093000},{"_id":"themes/fedlab/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1506384093000},{"_id":"themes/fedlab/source/.DS_Store","hash":"20bb55ec37c56fa03c0342969800bb3f5af93354","modified":1506697532000},{"_id":"themes/fedlab/source/apple-touch-icon.png","hash":"b7dad3dde9e7678f2c33857437a10c4651347d13","modified":1506383431000},{"_id":"themes/fedlab/source/favicon.ico","hash":"713df918c953e5337b482fcd388074308656d277","modified":1506383431000},{"_id":"themes/fedlab/layout/_partial/sidebar.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506437865000},{"_id":"themes/fedlab/layout/_partial/archive.ejs","hash":"d970f0335eb8b5d3126cd802ea229e2132ebb644","modified":1506734452000},{"_id":"themes/fedlab/layout/_partial/article.ejs","hash":"953bd507374680956669d85e2b7bf413d9d05f7d","modified":1506734449000},{"_id":"themes/fedlab/layout/_partial/banner.ejs","hash":"0babd1610a5c7a2dc000884b5357d566916d05d9","modified":1506437614000},{"_id":"themes/fedlab/layout/_partial/footer.ejs","hash":"75e73d39e51262f422049e6672ffeff47195dff0","modified":1506437576000},{"_id":"themes/fedlab/layout/_partial/head.ejs","hash":"33485086f61dc50bd94761696a64d80f967dc159","modified":1506697991000},{"_id":"themes/fedlab/layout/_partial/header.ejs","hash":"d0f399313dd16a4f93b26866e78b9bc2e40d7ecb","modified":1506734463000},{"_id":"themes/fedlab/layout/_partial/nav.ejs","hash":"71b4eae64e316749f2981db1582868c7fecf88b6","modified":1506437966000},{"_id":"themes/fedlab/source/css/fedlab.scss","hash":"88e842fb76c93a263e9525f0278a822aec63bb9e","modified":1506612031000},{"_id":"themes/fedlab/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1506697620000},{"_id":"themes/fedlab/source/img/article_default.gif","hash":"fa6f8c6cc78da80fb314e650ef9791ee66fb0b61","modified":1506437355000},{"_id":"themes/fedlab/source/img/logo.png","hash":"b7dad3dde9e7678f2c33857437a10c4651347d13","modified":1506383431000},{"_id":"themes/fedlab/source/js/index.js","hash":"71bd098dfd37ba41724c4f77e9800b4440620345","modified":1506700358000},{"_id":"themes/fedlab/source/img/banner.jpg","hash":"03ac8f96a626d28bac3e3a6b3c4f99057058005f","modified":1506437355000},{"_id":"themes/fedlab/source/css/_partial/_article-details.scss","hash":"b7ef92521aed7ceca8ee7573f8a61235fb6fc084","modified":1506643817000},{"_id":"themes/fedlab/source/css/_partial/_article-list.scss","hash":"0f2367749f5de5cce99f17ef2043c539a5d9aef6","modified":1506471834000},{"_id":"themes/fedlab/source/css/_partial/_backtop.scss","hash":"45d66b4aa510d5b112c40783ff7d7a5840e5a099","modified":1506437355000},{"_id":"themes/fedlab/source/css/_partial/_banner.scss","hash":"478a7fa4b272ce18db1b51031f04219c8850d763","modified":1506471806000},{"_id":"themes/fedlab/source/css/_partial/_footer.scss","hash":"912c140455ac7766f50662ebccbd0c5e0533e940","modified":1506437355000},{"_id":"themes/fedlab/source/css/_partial/_header.scss","hash":"f7432fdbfb898f439683e1d6c9be426b64686184","modified":1506437355000},{"_id":"themes/fedlab/source/css/_partial/_highlight.scss","hash":"da2a1031e3b402b6f9b8e3a1e4f4a905e0a23cdd","modified":1506643232000},{"_id":"themes/fedlab/source/css/_partial/_hr.scss","hash":"892738a200a77dc3b08643630f730a4dfb239304","modified":1506437355000},{"_id":"themes/fedlab/source/css/_partial/_icons.scss","hash":"7674b56437bc042b9d4e767e017afd199a25079c","modified":1506471915000},{"_id":"themes/fedlab/source/css/_partial/_main.scss","hash":"6903f7a78672d6ff60657c51a28073da199257bf","modified":1506437355000},{"_id":"themes/fedlab/source/css/_partial/_media.scss","hash":"3f8b6c53b5f33fcbe8507c1d5d78dc0ceceeec2a","modified":1506437355000},{"_id":"themes/fedlab/source/css/_partial/_mixin.scss","hash":"649311dcc500d1c068437f7d9570d0308093ff5b","modified":1506437355000},{"_id":"themes/fedlab/source/css/_partial/_reset.scss","hash":"c4b14cee0245a42f89d46d622de3b8b5029985eb","modified":1506437355000},{"_id":"themes/fedlab/source/css/_partial/_sidebar.scss","hash":"a49b7c16d24be7b0b7a7b4895f30dc35859b8295","modified":1506437355000},{"_id":"themes/fedlab/source/css/_partial/_view-more.scss","hash":"97d683b76b2559f64f254477d178f136c2726b9f","modified":1506437355000},{"_id":"themes/fedlab/source/img/icons/clear.png","hash":"2cc7f1cd90423c14349029cefc58c04fcb32da01","modified":1506437355000},{"_id":"themes/fedlab/source/img/icons/search.png","hash":"620dc856eca4f78d03dc44400f8e98557124a961","modified":1506437355000}],"Category":[{"name":"煦涵说","_id":"cj86mtvrj000260wqdbp78lep"}],"Data":[],"Page":[],"Post":[{"title":"煦涵说Babel","author":{"nick":"煦涵","github_name":"zuojj"},"date":"2017-09-03T09:00:00.000Z","thumb":"http://www.zuojj.com/wp-content/uploads/2017/06/babel.jpg","_content":"[Babel](http://babeljs.io/)，下一代javascript编译器，当前版本 `v2.4.0` ，它可以处理ES6的所有新语法，并内置了React JSX扩展及Flow类型注解支持，如果对Flow不是很了解可以查看FED实验室微信公众号文章[煦涵说Flow](https://segmentfault.com/a/1190000009639356)。\n\nBabel与JavaScript技术委员会（TC39）始终保持着高度一致，能够在ECMAScript新特性标准化之前为开发者提供现实可用的转码编译实现，以在ECMAScript规范最后定稿前获得来自世界各地开发者更多的反馈，从而间接推动了javascript的发展以及开发者在项目中尝试使用新技术。因此建议大家开始使用 \b\bBabel。\n\n## Babel 配置文件 `.babelrc`\n学习和使用Babel的**第一步**，配置 `.babelrc` 文件，该文件存放到项目根目录下，用来设置 Babel 的转码规则和插件。基本格式如下：\n```js\n{\n  \"presets\": [],\n  \"plugins\": []\n}\n```\n\n[presets](https://babeljs.io/docs/plugins/#presets)的规则集如下：\n\n```bash\n# replaces es2015, es2016, es2017, latest\n$ yarn add babel-preset-env --dev\n\n# es2015\n$ yarn add babel-preset-es2015 --dev\n\n# es2016\n$ yarn add babel-preset-es2016 --dev\n\n# es2017 \n$ yarn add babel-preset-es2017 --dev\n\n# react\n$ yarn add babel-preset-react --dev\n\n# flow\n$ yarn add babel-preset-flow --dev\n\n# The TC39 categorizes proposals into the following stages:\n# \n# Stage 0 - Strawman: just an idea, possible Babel plugin.\n# Stage 1 - Proposal: this is worth working on.\n# Stage 2 - Draft: initial spec.\n# Stage 3 - Candidate: complete spec and initial browser implementations.\n# Stage 4 - Finished: will be added to the next yearly release.\n# For more information, be sure to check out the current TC39 proposals and its process document.\n# \n# The TC39 stage process is also explained in detail across a few posts by Yehuda Katz (@wycatz) over at thefeedbackloop.xyz: # Stage 0 and 1, Stage 2, Stage 3, and Stage 4 coming soon.\n\n$ yarn add babel-preset-stage-x --dev\n```\n[plugins](https://babeljs.io/docs/plugins/#transform-plugins)插件集合很多。\n\n新建一个配置文件 `.babelrc`，并增加如下代码，以供我们下面调试使用:\n```bash\n# 新建配置文件.babelrc，并添加如下内容\n# {\n#   \"presets\": [\"es2015\"],\n#   \"plugins\": []\n# }\n$ touch .babelrc\n# 安装 babel-preset-es2015\n$ yarn add babel-preset-es2015 --dev\n```\n\n## 安装和使用 Babel\n\n> ps: 本文将使用Yarn来安装依赖相关npm包，如果不了解Yarn的欢迎阅读公众号专栏[煦涵说Yarn](https://segmentfault.com/a/1190000009626901)。\n\n### 命令行方式运行 babel-cli\n`babel-cli` 的 CLI 是一种在命令行下使用 Babel 编译文件的简单方法。\n\n#### 全局安装\n```bash\n# 全局安装\n$ yarn global add babel-cli\n```\n\n新建一个source.js文件，内容如下：\n```js\nvar arr = [1, 2, 3, 4];\n\narr = arr.map((item, index) => {\n    return item * index;\n});\n\nconsole.log(arr);\n```\n```bash\n# 输出结果到控制台\n$ babel source.js\n\n# 输出结果到文件\n$ babel source.js --out-file dist.js\nor \n$ babel source.js -o dist.js\n\n# 输出结果到目录\n$ babel /src --out-dir /dist\nor \n$ babel /src -d /dist\n```\n\n#### 项目内安装(局部安装)\n\n```bash\n# 初始化一个项目package.json\n$ mkdir first-babel-proj\n$ cd first-babel-proj\n$ yarn init \n$ yarn add babel-cli --dev\n```\n修改package.json，添加如下文本\n```diff\n{\n  \"name\": \"babel-proj\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.24.1\"\n  },\n+  \"scripts\": {\n+   \"build\": \"babel src -d dist\"\n+  }\n}\n```\n运行\n```\n$ yarn run build\n```\n\n### require方式运行 babel-register\n> ps: 这种方法并不适合正式产品环境使用。 在部署到生成环境之前预先编译会更好。 不过用在构建脚本或是其他本地运行的脚本中是非常合适的。\n\n```\n$ yarn add babel-register --dev\n```\n新建compile.js文件\n```js\nrequire('babel-register');\nrequire('./src/source.js');\n```\n运行\n```bash\nnode compile.js\n```\n运行结果\n```bash\n$ [0, 2, 6, 12]\n```\n\n### 编程方式运行 babel-core\n```bash\n$ yarn add babel-core --dev\n\n```\n字符串形式的 JavaScript 代码可以直接使用 `babel.transform` 来编译。\n\n```js\nbabel.transform(\"code();\", options);\n// => { code, map, ast }\n```\n\n如果是文件的话，可以使用异步 api：\n\n```js\nbabel.transformFile(\"filename.js\", options, function(err, result) {\n  result; // => { code, map, ast }\n});\n```\n\n或者是同步 api：\n\n```js\nbabel.transformFileSync(\"filename.js\", options);\n// => { code, map, ast }\n```\n\n要是已经有一个 Babel AST（抽象语法树）了就可以直接从 AST 进行转换。\n\n```js\nbabel.transformFromAst(ast, code, options);\n// => { code, map, ast }\n```\n\n更多选项 [options](https://babeljs.io/docs/usage/api/#options).\n\n## Babel 与 Webpack\n使用 [babel-loader](https://github.com/babel/babel-loader) 插件\n```bash\n$ yarn add bable-loader --dev\n```\nwebpack.config.js 配置文件增加如下规则：\n```js\n{\n    test: /\\.js$/,\n    loader: 'babel-loader'\n}\n```\n\n## Babel 低版本浏览器兼容\n可参考: \n* [煦涵说webpack-IE低版本兼容指南](https://segmentfault.com/a/1190000009613296)，或者FED实验室公众号文章\n* [React - IE低版本兼容](https://github.com/xcatliu/react-ie8)\n","source":"_posts/煦涵说Babel.md","raw":"---\ntitle: 煦涵说Babel\nauthor:\n   nick: 煦涵\n   github_name: zuojj\ndate: 2017-09-03 17:00\ncategories: 煦涵说\ntags: babel\nthumb: http://www.zuojj.com/wp-content/uploads/2017/06/babel.jpg\n---\n[Babel](http://babeljs.io/)，下一代javascript编译器，当前版本 `v2.4.0` ，它可以处理ES6的所有新语法，并内置了React JSX扩展及Flow类型注解支持，如果对Flow不是很了解可以查看FED实验室微信公众号文章[煦涵说Flow](https://segmentfault.com/a/1190000009639356)。\n\nBabel与JavaScript技术委员会（TC39）始终保持着高度一致，能够在ECMAScript新特性标准化之前为开发者提供现实可用的转码编译实现，以在ECMAScript规范最后定稿前获得来自世界各地开发者更多的反馈，从而间接推动了javascript的发展以及开发者在项目中尝试使用新技术。因此建议大家开始使用 \b\bBabel。\n\n## Babel 配置文件 `.babelrc`\n学习和使用Babel的**第一步**，配置 `.babelrc` 文件，该文件存放到项目根目录下，用来设置 Babel 的转码规则和插件。基本格式如下：\n```js\n{\n  \"presets\": [],\n  \"plugins\": []\n}\n```\n\n[presets](https://babeljs.io/docs/plugins/#presets)的规则集如下：\n\n```bash\n# replaces es2015, es2016, es2017, latest\n$ yarn add babel-preset-env --dev\n\n# es2015\n$ yarn add babel-preset-es2015 --dev\n\n# es2016\n$ yarn add babel-preset-es2016 --dev\n\n# es2017 \n$ yarn add babel-preset-es2017 --dev\n\n# react\n$ yarn add babel-preset-react --dev\n\n# flow\n$ yarn add babel-preset-flow --dev\n\n# The TC39 categorizes proposals into the following stages:\n# \n# Stage 0 - Strawman: just an idea, possible Babel plugin.\n# Stage 1 - Proposal: this is worth working on.\n# Stage 2 - Draft: initial spec.\n# Stage 3 - Candidate: complete spec and initial browser implementations.\n# Stage 4 - Finished: will be added to the next yearly release.\n# For more information, be sure to check out the current TC39 proposals and its process document.\n# \n# The TC39 stage process is also explained in detail across a few posts by Yehuda Katz (@wycatz) over at thefeedbackloop.xyz: # Stage 0 and 1, Stage 2, Stage 3, and Stage 4 coming soon.\n\n$ yarn add babel-preset-stage-x --dev\n```\n[plugins](https://babeljs.io/docs/plugins/#transform-plugins)插件集合很多。\n\n新建一个配置文件 `.babelrc`，并增加如下代码，以供我们下面调试使用:\n```bash\n# 新建配置文件.babelrc，并添加如下内容\n# {\n#   \"presets\": [\"es2015\"],\n#   \"plugins\": []\n# }\n$ touch .babelrc\n# 安装 babel-preset-es2015\n$ yarn add babel-preset-es2015 --dev\n```\n\n## 安装和使用 Babel\n\n> ps: 本文将使用Yarn来安装依赖相关npm包，如果不了解Yarn的欢迎阅读公众号专栏[煦涵说Yarn](https://segmentfault.com/a/1190000009626901)。\n\n### 命令行方式运行 babel-cli\n`babel-cli` 的 CLI 是一种在命令行下使用 Babel 编译文件的简单方法。\n\n#### 全局安装\n```bash\n# 全局安装\n$ yarn global add babel-cli\n```\n\n新建一个source.js文件，内容如下：\n```js\nvar arr = [1, 2, 3, 4];\n\narr = arr.map((item, index) => {\n    return item * index;\n});\n\nconsole.log(arr);\n```\n```bash\n# 输出结果到控制台\n$ babel source.js\n\n# 输出结果到文件\n$ babel source.js --out-file dist.js\nor \n$ babel source.js -o dist.js\n\n# 输出结果到目录\n$ babel /src --out-dir /dist\nor \n$ babel /src -d /dist\n```\n\n#### 项目内安装(局部安装)\n\n```bash\n# 初始化一个项目package.json\n$ mkdir first-babel-proj\n$ cd first-babel-proj\n$ yarn init \n$ yarn add babel-cli --dev\n```\n修改package.json，添加如下文本\n```diff\n{\n  \"name\": \"babel-proj\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.24.1\"\n  },\n+  \"scripts\": {\n+   \"build\": \"babel src -d dist\"\n+  }\n}\n```\n运行\n```\n$ yarn run build\n```\n\n### require方式运行 babel-register\n> ps: 这种方法并不适合正式产品环境使用。 在部署到生成环境之前预先编译会更好。 不过用在构建脚本或是其他本地运行的脚本中是非常合适的。\n\n```\n$ yarn add babel-register --dev\n```\n新建compile.js文件\n```js\nrequire('babel-register');\nrequire('./src/source.js');\n```\n运行\n```bash\nnode compile.js\n```\n运行结果\n```bash\n$ [0, 2, 6, 12]\n```\n\n### 编程方式运行 babel-core\n```bash\n$ yarn add babel-core --dev\n\n```\n字符串形式的 JavaScript 代码可以直接使用 `babel.transform` 来编译。\n\n```js\nbabel.transform(\"code();\", options);\n// => { code, map, ast }\n```\n\n如果是文件的话，可以使用异步 api：\n\n```js\nbabel.transformFile(\"filename.js\", options, function(err, result) {\n  result; // => { code, map, ast }\n});\n```\n\n或者是同步 api：\n\n```js\nbabel.transformFileSync(\"filename.js\", options);\n// => { code, map, ast }\n```\n\n要是已经有一个 Babel AST（抽象语法树）了就可以直接从 AST 进行转换。\n\n```js\nbabel.transformFromAst(ast, code, options);\n// => { code, map, ast }\n```\n\n更多选项 [options](https://babeljs.io/docs/usage/api/#options).\n\n## Babel 与 Webpack\n使用 [babel-loader](https://github.com/babel/babel-loader) 插件\n```bash\n$ yarn add bable-loader --dev\n```\nwebpack.config.js 配置文件增加如下规则：\n```js\n{\n    test: /\\.js$/,\n    loader: 'babel-loader'\n}\n```\n\n## Babel 低版本浏览器兼容\n可参考: \n* [煦涵说webpack-IE低版本兼容指南](https://segmentfault.com/a/1190000009613296)，或者FED实验室公众号文章\n* [React - IE低版本兼容](https://github.com/xcatliu/react-ie8)\n","slug":"煦涵说Babel","published":1,"updated":"2017-09-29T15:23:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj86mtvr4000060wqkv1o3azi","content":"<p><a href=\"http://babeljs.io/\" target=\"_blank\" rel=\"external\">Babel</a>，下一代javascript编译器，当前版本 <code>v2.4.0</code> ，它可以处理ES6的所有新语法，并内置了React JSX扩展及Flow类型注解支持，如果对Flow不是很了解可以查看FED实验室微信公众号文章<a href=\"https://segmentfault.com/a/1190000009639356\" target=\"_blank\" rel=\"external\">煦涵说Flow</a>。</p>\n<p>Babel与JavaScript技术委员会（TC39）始终保持着高度一致，能够在ECMAScript新特性标准化之前为开发者提供现实可用的转码编译实现，以在ECMAScript规范最后定稿前获得来自世界各地开发者更多的反馈，从而间接推动了javascript的发展以及开发者在项目中尝试使用新技术。因此建议大家开始使用 \b\bBabel。</p>\n<h2 id=\"Babel-配置文件-babelrc\"><a href=\"#Babel-配置文件-babelrc\" class=\"headerlink\" title=\"Babel 配置文件 .babelrc\"></a>Babel 配置文件 <code>.babelrc</code></h2><p>学习和使用Babel的<strong>第一步</strong>，配置 <code>.babelrc</code> 文件，该文件存放到项目根目录下，用来设置 Babel 的转码规则和插件。基本格式如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"presets\"</span>: [],</div><div class=\"line\">  <span class=\"string\">\"plugins\"</span>: []</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://babeljs.io/docs/plugins/#presets\" target=\"_blank\" rel=\"external\">presets</a>的规则集如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># replaces es2015, es2016, es2017, latest</span></div><div class=\"line\">$ yarn add babel-preset-env --dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># es2015</span></div><div class=\"line\">$ yarn add babel-preset-es2015 --dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># es2016</span></div><div class=\"line\">$ yarn add babel-preset-es2016 --dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># es2017 </span></div><div class=\"line\">$ yarn add babel-preset-es2017 --dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># react</span></div><div class=\"line\">$ yarn add babel-preset-react --dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># flow</span></div><div class=\"line\">$ yarn add babel-preset-flow --dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># The TC39 categorizes proposals into the following stages:</span></div><div class=\"line\"><span class=\"comment\"># </span></div><div class=\"line\"><span class=\"comment\"># Stage 0 - Strawman: just an idea, possible Babel plugin.</span></div><div class=\"line\"><span class=\"comment\"># Stage 1 - Proposal: this is worth working on.</span></div><div class=\"line\"><span class=\"comment\"># Stage 2 - Draft: initial spec.</span></div><div class=\"line\"><span class=\"comment\"># Stage 3 - Candidate: complete spec and initial browser implementations.</span></div><div class=\"line\"><span class=\"comment\"># Stage 4 - Finished: will be added to the next yearly release.</span></div><div class=\"line\"><span class=\"comment\"># For more information, be sure to check out the current TC39 proposals and its process document.</span></div><div class=\"line\"><span class=\"comment\"># </span></div><div class=\"line\"><span class=\"comment\"># The TC39 stage process is also explained in detail across a few posts by Yehuda Katz (@wycatz) over at thefeedbackloop.xyz: # Stage 0 and 1, Stage 2, Stage 3, and Stage 4 coming soon.</span></div><div class=\"line\"></div><div class=\"line\">$ yarn add babel-preset-stage-x --dev</div></pre></td></tr></table></figure>\n<p><a href=\"https://babeljs.io/docs/plugins/#transform-plugins\" target=\"_blank\" rel=\"external\">plugins</a>插件集合很多。</p>\n<p>新建一个配置文件 <code>.babelrc</code>，并增加如下代码，以供我们下面调试使用:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 新建配置文件.babelrc，并添加如下内容</span></div><div class=\"line\"><span class=\"comment\"># &#123;</span></div><div class=\"line\"><span class=\"comment\">#   \"presets\": [\"es2015\"],</span></div><div class=\"line\"><span class=\"comment\">#   \"plugins\": []</span></div><div class=\"line\"><span class=\"comment\"># &#125;</span></div><div class=\"line\">$ touch .babelrc</div><div class=\"line\"><span class=\"comment\"># 安装 babel-preset-es2015</span></div><div class=\"line\">$ yarn add babel-preset-es2015 --dev</div></pre></td></tr></table></figure></p>\n<h2 id=\"安装和使用-Babel\"><a href=\"#安装和使用-Babel\" class=\"headerlink\" title=\"安装和使用 Babel\"></a>安装和使用 Babel</h2><blockquote>\n<p>ps: 本文将使用Yarn来安装依赖相关npm包，如果不了解Yarn的欢迎阅读公众号专栏<a href=\"https://segmentfault.com/a/1190000009626901\" target=\"_blank\" rel=\"external\">煦涵说Yarn</a>。</p>\n</blockquote>\n<h3 id=\"命令行方式运行-babel-cli\"><a href=\"#命令行方式运行-babel-cli\" class=\"headerlink\" title=\"命令行方式运行 babel-cli\"></a>命令行方式运行 babel-cli</h3><p><code>babel-cli</code> 的 CLI 是一种在命令行下使用 Babel 编译文件的简单方法。</p>\n<h4 id=\"全局安装\"><a href=\"#全局安装\" class=\"headerlink\" title=\"全局安装\"></a>全局安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 全局安装</span></div><div class=\"line\">$ yarn global add babel-cli</div></pre></td></tr></table></figure>\n<p>新建一个source.js文件，内容如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"></div><div class=\"line\">arr = arr.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> item * index;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 输出结果到控制台</span></div><div class=\"line\">$ babel source.js</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 输出结果到文件</span></div><div class=\"line\">$ babel source.js --out-file dist.js</div><div class=\"line\">or </div><div class=\"line\">$ babel source.js -o dist.js</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 输出结果到目录</span></div><div class=\"line\">$ babel /src --out-dir /dist</div><div class=\"line\">or </div><div class=\"line\">$ babel /src -d /dist</div></pre></td></tr></table></figure>\n<h4 id=\"项目内安装-局部安装\"><a href=\"#项目内安装-局部安装\" class=\"headerlink\" title=\"项目内安装(局部安装)\"></a>项目内安装(局部安装)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 初始化一个项目package.json</span></div><div class=\"line\">$ mkdir first-babel-proj</div><div class=\"line\">$ <span class=\"built_in\">cd</span> first-babel-proj</div><div class=\"line\">$ yarn init </div><div class=\"line\">$ yarn add babel-cli --dev</div></pre></td></tr></table></figure>\n<p>修改package.json，添加如下文本<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  \"name\": \"babel-proj\",</div><div class=\"line\">  \"version\": \"1.0.0\",</div><div class=\"line\">  \"main\": \"index.js\",</div><div class=\"line\">  \"license\": \"MIT\",</div><div class=\"line\">  \"devDependencies\": &#123;</div><div class=\"line\">    \"babel-cli\": \"^6.24.1\"</div><div class=\"line\">  &#125;,</div><div class=\"line\"><span class=\"addition\">+  \"scripts\": &#123;</span></div><div class=\"line\"><span class=\"addition\">+   \"build\": \"babel src -d dist\"</span></div><div class=\"line\"><span class=\"addition\">+  &#125;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ yarn run build</div></pre></td></tr></table></figure></p>\n<h3 id=\"require方式运行-babel-register\"><a href=\"#require方式运行-babel-register\" class=\"headerlink\" title=\"require方式运行 babel-register\"></a>require方式运行 babel-register</h3><blockquote>\n<p>ps: 这种方法并不适合正式产品环境使用。 在部署到生成环境之前预先编译会更好。 不过用在构建脚本或是其他本地运行的脚本中是非常合适的。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ yarn add babel-register --dev</div></pre></td></tr></table></figure>\n<p>新建compile.js文件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'babel-register'</span>);</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./src/source.js'</span>);</div></pre></td></tr></table></figure></p>\n<p>运行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node compile.js</div></pre></td></tr></table></figure></p>\n<p>运行结果<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ [0, 2, 6, 12]</div></pre></td></tr></table></figure></p>\n<h3 id=\"编程方式运行-babel-core\"><a href=\"#编程方式运行-babel-core\" class=\"headerlink\" title=\"编程方式运行 babel-core\"></a>编程方式运行 babel-core</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ yarn add babel-core --dev</div></pre></td></tr></table></figure>\n<p>字符串形式的 JavaScript 代码可以直接使用 <code>babel.transform</code> 来编译。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">babel.transform(<span class=\"string\">\"code();\"</span>, options);</div><div class=\"line\"><span class=\"comment\">// =&gt; &#123; code, map, ast &#125;</span></div></pre></td></tr></table></figure>\n<p>如果是文件的话，可以使用异步 api：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">babel.transformFile(<span class=\"string\">\"filename.js\"</span>, options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</div><div class=\"line\">  result; <span class=\"comment\">// =&gt; &#123; code, map, ast &#125;</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>或者是同步 api：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">babel.transformFileSync(<span class=\"string\">\"filename.js\"</span>, options);</div><div class=\"line\"><span class=\"comment\">// =&gt; &#123; code, map, ast &#125;</span></div></pre></td></tr></table></figure>\n<p>要是已经有一个 Babel AST（抽象语法树）了就可以直接从 AST 进行转换。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">babel.transformFromAst(ast, code, options);</div><div class=\"line\"><span class=\"comment\">// =&gt; &#123; code, map, ast &#125;</span></div></pre></td></tr></table></figure>\n<p>更多选项 <a href=\"https://babeljs.io/docs/usage/api/#options\" target=\"_blank\" rel=\"external\">options</a>.</p>\n<h2 id=\"Babel-与-Webpack\"><a href=\"#Babel-与-Webpack\" class=\"headerlink\" title=\"Babel 与 Webpack\"></a>Babel 与 Webpack</h2><p>使用 <a href=\"https://github.com/babel/babel-loader\" target=\"_blank\" rel=\"external\">babel-loader</a> 插件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ yarn add bable-loader --dev</div></pre></td></tr></table></figure></p>\n<p>webpack.config.js 配置文件增加如下规则：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">    loader: <span class=\"string\">'babel-loader'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Babel-低版本浏览器兼容\"><a href=\"#Babel-低版本浏览器兼容\" class=\"headerlink\" title=\"Babel 低版本浏览器兼容\"></a>Babel 低版本浏览器兼容</h2><p>可参考: </p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000009613296\" target=\"_blank\" rel=\"external\">煦涵说webpack-IE低版本兼容指南</a>，或者FED实验室公众号文章</li>\n<li><a href=\"https://github.com/xcatliu/react-ie8\" target=\"_blank\" rel=\"external\">React - IE低版本兼容</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://babeljs.io/\" target=\"_blank\" rel=\"external\">Babel</a>，下一代javascript编译器，当前版本 <code>v2.4.0</code> ，它可以处理ES6的所有新语法，并内置了React JSX扩展及Flow类型注解支持，如果对Flow不是很了解可以查看FED实验室微信公众号文章<a href=\"https://segmentfault.com/a/1190000009639356\" target=\"_blank\" rel=\"external\">煦涵说Flow</a>。</p>\n<p>Babel与JavaScript技术委员会（TC39）始终保持着高度一致，能够在ECMAScript新特性标准化之前为开发者提供现实可用的转码编译实现，以在ECMAScript规范最后定稿前获得来自世界各地开发者更多的反馈，从而间接推动了javascript的发展以及开发者在项目中尝试使用新技术。因此建议大家开始使用 \b\bBabel。</p>\n<h2 id=\"Babel-配置文件-babelrc\"><a href=\"#Babel-配置文件-babelrc\" class=\"headerlink\" title=\"Babel 配置文件 .babelrc\"></a>Babel 配置文件 <code>.babelrc</code></h2><p>学习和使用Babel的<strong>第一步</strong>，配置 <code>.babelrc</code> 文件，该文件存放到项目根目录下，用来设置 Babel 的转码规则和插件。基本格式如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"presets\"</span>: [],</div><div class=\"line\">  <span class=\"string\">\"plugins\"</span>: []</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://babeljs.io/docs/plugins/#presets\" target=\"_blank\" rel=\"external\">presets</a>的规则集如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># replaces es2015, es2016, es2017, latest</span></div><div class=\"line\">$ yarn add babel-preset-env --dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># es2015</span></div><div class=\"line\">$ yarn add babel-preset-es2015 --dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># es2016</span></div><div class=\"line\">$ yarn add babel-preset-es2016 --dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># es2017 </span></div><div class=\"line\">$ yarn add babel-preset-es2017 --dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># react</span></div><div class=\"line\">$ yarn add babel-preset-react --dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># flow</span></div><div class=\"line\">$ yarn add babel-preset-flow --dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># The TC39 categorizes proposals into the following stages:</span></div><div class=\"line\"><span class=\"comment\"># </span></div><div class=\"line\"><span class=\"comment\"># Stage 0 - Strawman: just an idea, possible Babel plugin.</span></div><div class=\"line\"><span class=\"comment\"># Stage 1 - Proposal: this is worth working on.</span></div><div class=\"line\"><span class=\"comment\"># Stage 2 - Draft: initial spec.</span></div><div class=\"line\"><span class=\"comment\"># Stage 3 - Candidate: complete spec and initial browser implementations.</span></div><div class=\"line\"><span class=\"comment\"># Stage 4 - Finished: will be added to the next yearly release.</span></div><div class=\"line\"><span class=\"comment\"># For more information, be sure to check out the current TC39 proposals and its process document.</span></div><div class=\"line\"><span class=\"comment\"># </span></div><div class=\"line\"><span class=\"comment\"># The TC39 stage process is also explained in detail across a few posts by Yehuda Katz (@wycatz) over at thefeedbackloop.xyz: # Stage 0 and 1, Stage 2, Stage 3, and Stage 4 coming soon.</span></div><div class=\"line\"></div><div class=\"line\">$ yarn add babel-preset-stage-x --dev</div></pre></td></tr></table></figure>\n<p><a href=\"https://babeljs.io/docs/plugins/#transform-plugins\" target=\"_blank\" rel=\"external\">plugins</a>插件集合很多。</p>\n<p>新建一个配置文件 <code>.babelrc</code>，并增加如下代码，以供我们下面调试使用:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 新建配置文件.babelrc，并添加如下内容</span></div><div class=\"line\"><span class=\"comment\"># &#123;</span></div><div class=\"line\"><span class=\"comment\">#   \"presets\": [\"es2015\"],</span></div><div class=\"line\"><span class=\"comment\">#   \"plugins\": []</span></div><div class=\"line\"><span class=\"comment\"># &#125;</span></div><div class=\"line\">$ touch .babelrc</div><div class=\"line\"><span class=\"comment\"># 安装 babel-preset-es2015</span></div><div class=\"line\">$ yarn add babel-preset-es2015 --dev</div></pre></td></tr></table></figure></p>\n<h2 id=\"安装和使用-Babel\"><a href=\"#安装和使用-Babel\" class=\"headerlink\" title=\"安装和使用 Babel\"></a>安装和使用 Babel</h2><blockquote>\n<p>ps: 本文将使用Yarn来安装依赖相关npm包，如果不了解Yarn的欢迎阅读公众号专栏<a href=\"https://segmentfault.com/a/1190000009626901\" target=\"_blank\" rel=\"external\">煦涵说Yarn</a>。</p>\n</blockquote>\n<h3 id=\"命令行方式运行-babel-cli\"><a href=\"#命令行方式运行-babel-cli\" class=\"headerlink\" title=\"命令行方式运行 babel-cli\"></a>命令行方式运行 babel-cli</h3><p><code>babel-cli</code> 的 CLI 是一种在命令行下使用 Babel 编译文件的简单方法。</p>\n<h4 id=\"全局安装\"><a href=\"#全局安装\" class=\"headerlink\" title=\"全局安装\"></a>全局安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 全局安装</span></div><div class=\"line\">$ yarn global add babel-cli</div></pre></td></tr></table></figure>\n<p>新建一个source.js文件，内容如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"></div><div class=\"line\">arr = arr.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> item * index;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 输出结果到控制台</span></div><div class=\"line\">$ babel source.js</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 输出结果到文件</span></div><div class=\"line\">$ babel source.js --out-file dist.js</div><div class=\"line\">or </div><div class=\"line\">$ babel source.js -o dist.js</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 输出结果到目录</span></div><div class=\"line\">$ babel /src --out-dir /dist</div><div class=\"line\">or </div><div class=\"line\">$ babel /src -d /dist</div></pre></td></tr></table></figure>\n<h4 id=\"项目内安装-局部安装\"><a href=\"#项目内安装-局部安装\" class=\"headerlink\" title=\"项目内安装(局部安装)\"></a>项目内安装(局部安装)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 初始化一个项目package.json</span></div><div class=\"line\">$ mkdir first-babel-proj</div><div class=\"line\">$ <span class=\"built_in\">cd</span> first-babel-proj</div><div class=\"line\">$ yarn init </div><div class=\"line\">$ yarn add babel-cli --dev</div></pre></td></tr></table></figure>\n<p>修改package.json，添加如下文本<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  \"name\": \"babel-proj\",</div><div class=\"line\">  \"version\": \"1.0.0\",</div><div class=\"line\">  \"main\": \"index.js\",</div><div class=\"line\">  \"license\": \"MIT\",</div><div class=\"line\">  \"devDependencies\": &#123;</div><div class=\"line\">    \"babel-cli\": \"^6.24.1\"</div><div class=\"line\">  &#125;,</div><div class=\"line\"><span class=\"addition\">+  \"scripts\": &#123;</span></div><div class=\"line\"><span class=\"addition\">+   \"build\": \"babel src -d dist\"</span></div><div class=\"line\"><span class=\"addition\">+  &#125;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ yarn run build</div></pre></td></tr></table></figure></p>\n<h3 id=\"require方式运行-babel-register\"><a href=\"#require方式运行-babel-register\" class=\"headerlink\" title=\"require方式运行 babel-register\"></a>require方式运行 babel-register</h3><blockquote>\n<p>ps: 这种方法并不适合正式产品环境使用。 在部署到生成环境之前预先编译会更好。 不过用在构建脚本或是其他本地运行的脚本中是非常合适的。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ yarn add babel-register --dev</div></pre></td></tr></table></figure>\n<p>新建compile.js文件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'babel-register'</span>);</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./src/source.js'</span>);</div></pre></td></tr></table></figure></p>\n<p>运行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node compile.js</div></pre></td></tr></table></figure></p>\n<p>运行结果<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ [0, 2, 6, 12]</div></pre></td></tr></table></figure></p>\n<h3 id=\"编程方式运行-babel-core\"><a href=\"#编程方式运行-babel-core\" class=\"headerlink\" title=\"编程方式运行 babel-core\"></a>编程方式运行 babel-core</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ yarn add babel-core --dev</div></pre></td></tr></table></figure>\n<p>字符串形式的 JavaScript 代码可以直接使用 <code>babel.transform</code> 来编译。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">babel.transform(<span class=\"string\">\"code();\"</span>, options);</div><div class=\"line\"><span class=\"comment\">// =&gt; &#123; code, map, ast &#125;</span></div></pre></td></tr></table></figure>\n<p>如果是文件的话，可以使用异步 api：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">babel.transformFile(<span class=\"string\">\"filename.js\"</span>, options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</div><div class=\"line\">  result; <span class=\"comment\">// =&gt; &#123; code, map, ast &#125;</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>或者是同步 api：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">babel.transformFileSync(<span class=\"string\">\"filename.js\"</span>, options);</div><div class=\"line\"><span class=\"comment\">// =&gt; &#123; code, map, ast &#125;</span></div></pre></td></tr></table></figure>\n<p>要是已经有一个 Babel AST（抽象语法树）了就可以直接从 AST 进行转换。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">babel.transformFromAst(ast, code, options);</div><div class=\"line\"><span class=\"comment\">// =&gt; &#123; code, map, ast &#125;</span></div></pre></td></tr></table></figure>\n<p>更多选项 <a href=\"https://babeljs.io/docs/usage/api/#options\" target=\"_blank\" rel=\"external\">options</a>.</p>\n<h2 id=\"Babel-与-Webpack\"><a href=\"#Babel-与-Webpack\" class=\"headerlink\" title=\"Babel 与 Webpack\"></a>Babel 与 Webpack</h2><p>使用 <a href=\"https://github.com/babel/babel-loader\" target=\"_blank\" rel=\"external\">babel-loader</a> 插件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ yarn add bable-loader --dev</div></pre></td></tr></table></figure></p>\n<p>webpack.config.js 配置文件增加如下规则：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">    loader: <span class=\"string\">'babel-loader'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Babel-低版本浏览器兼容\"><a href=\"#Babel-低版本浏览器兼容\" class=\"headerlink\" title=\"Babel 低版本浏览器兼容\"></a>Babel 低版本浏览器兼容</h2><p>可参考: </p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000009613296\" target=\"_blank\" rel=\"external\">煦涵说webpack-IE低版本兼容指南</a>，或者FED实验室公众号文章</li>\n<li><a href=\"https://github.com/xcatliu/react-ie8\" target=\"_blank\" rel=\"external\">React - IE低版本兼容</a></li>\n</ul>\n"},{"title":"煦涵说Flow","author":{"nick":"煦涵","github_name":"zuojj"},"date":"2017-09-03T09:00:00.000Z","thumb":"http://www.zuojj.com/wp-content/uploads/2017/05/flow.png","_content":"JSON(Javascript Object Notaion, javascript 对象表示法)， 是一种数据交换格式，能够在服务器端交换数据， 2001年由Douglas Crockford提出，目的是取代繁琐笨重的XML格式。\n\nJSON 数据格式的优点：\n* 与语言无关的文本数据格式\n* 轻量、简单、易维护\n* 是javascript编程语言的一个子集(**Standard ECMA-262 3rd Edition - December 1999**)， 符合javascript 语言语法，可以使用javascript提供的方法直接解析处理\n\nJSON 建立在两种数据结构上：\n* 键 / 值对：各种语言中可以为 字符串、对象、数组或者哈希表\n* 有序列表（值）：各种语言中实现为数组、向量、列表或者序列\n\n## JSON的基本语法：\n* JSON 对象\n```json\n{\n    \"key\": value\n}\n```\n* JSON 数组\n```json\n[value, value, value]\n```\n* value 可取值\nvalue 可以是 String(必须使用双引号包裹)、Number、Boolean、null、Object、Array, 这些形式可以嵌套，value值不能是八进制、十六进制（0xF0F）、undefined、function、日期对象，看下面示例：\n\n合格的 JSON 格式：\n```js\n{ \n    \"name\": \"煦涵\", \n    \"name\": null, \n    \"male\": true, \n    \"age\": 23\n}\n\n{ \n    \"brother\": [\"煦涵1\", \"煦涵2\"]\n}\n\n{ \n    \"brother\": {\n        \"煦涵1\": {\n            \"age\": 32\n        },\n        \"煦涵2\": {\n            \"age\": 30\n        }\n    }\n}\n\n[{\n    \"name\": \"煦涵”\n    \"age\": 30\n},{\n    \"name\": \"张三”\n    \"age\": 27\n}]\n```\n不合格的 JSON 格式：\n```js\n// key 必须用双引号包裹，value 如果是字符串必须用双引号包裹\n\n{ 'name': \"煦涵\" } \n[1, 2, 3, 4, oxFOF] \n{ 'name': undefined } \n{ \n    'name': function() { \n        return \"煦涵\"\n    } \n}\n{ 'name': new Date() }  \n```\n如果value的一个String（双引号包围）内包含 `\\\"`、`\\\\`、`\\/`、`\\b`、`\\f`、`\\n`、`\\r`、`\\t`、`\\u001f` 需要使用反斜杠\n如果value的一个Number，不能使用八进制和十六进制数值\nPS： value对空格没有限制要求\n\n\n## JSON 对象\n聊完 JSON 下面我们来聊聊 JSON 对象，javascript 在 ES5中新增了 JSON 对象，用来处理 JSON 文本数据，实现字符串与 JSON 对象间的相互转换，`JSON.stringify ( value [ , replacer [ , space ] ] )` 和 `JSON.parse ( text [ , reviver ] )`， 前者是把 JSON 对象转换为 JSON 字符串，后者的把 JSON 字符串解析为 JSON 对象，下面来详细看看这个两个方法。\n\n### JSON.stringify ( value [ , replacer [ , space ] ] )\n\n1. 第一个参数： Value 必须项，可以是 Object, Array, String, Boolean, Number, Null.看几个例子：\n\n```js\nJSON.stringify({\n    \"name\": \"煦涵\",\n    \"age\" : 28,\n    \"male\" : true,\n    \"brother\": [1, 2, 3],\n    \"parent\": {\n        \"father\" : {\n            \"name\": \"name\"\n        },\n        \"mother\": {\n            \"name\": \"name\"\n        }\n    },\n    \"other\": null\n})\n\n// result\n\"{\"name\":\"煦涵\",\"age\":28,\"male\":true,\"brother\":[\"B1\",\"B2\",\"B3\"],\"parent\":{\"father\":{\"name\":\"name\"},\"mother\":{\"name\":\"name\"}},\"other\":null}\" \n```\n\n当待转换值不是 JSON 的基本类型时：\n* 原始对象 item 值是 undefined、函数或 XML 对象，值会被过滤；\n* 数组 item 是 undefined、函数或 XML 对象，值会被转成 null；\n* 正则对象会被转换成空对象；\n* 对象的不可遍历属性会被忽略；\n* 八进制和十六进制会被转换成十进制;\n* 特殊字符需要转义成反斜杠\n\n```js\nJSON.stringify({\n    \"name\": undefined,\n    \"age\" : function() {return 28},\n    \"male\" : /male/g,\n    \"brother\": [undefined, function() {return abc}, \"B3\", 0xFOF],\n    \"parent\": {\n        \"father\" : {\n            \"name\": undefined\n        },\n        \"mother\": {\n            \"name\": \"name\"\n        }\n    },\n    \"other\": null\n})\n\n// result: 正则被转出了空对象，undefined, function 被忽略或者转成 null\n\n\"{\"male\":{},\"brother\":[null,null,\"B3\", 3855],\"parent\":{\"father\":{},\"mother\":{\"name\":\"name\"}},\"other\":null}\"\n\n/* 不可遍历属性 */\nvar demo = {};\nObject.defineProperties(demo, {\n    \"name\": {\n        value: \"煦涵\",\n        enumerable: false\n    },\n    \"age\": {\n        value: 28,\n        enumerable: true\n    }\n})\nJSON.stringify(demo);\n\n// enumerable: 当且仅当该属性的 enumerable 为 true 时，该属性才能够出现在对象的枚举属性中,\n// result: name 属性会被过滤\n\"{\"age\":28}\"\n\n/* 特殊字符处理-01 */\nJSON.stringify({\n    \"special01\": \"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\",\n    \"special02\": \"双引号 \\\"，单引号 ', 斜杠 \\/, 反斜杠 \\\\\",\n    \"special03\": \"unicdoe字符 \\u001f\"\n})\n\n// result\n\"{\"special01\":\"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\",\"special02\":\"双引号 \\\"，单引号 ', 斜杠 /, 反斜杠 \\\\\",\"special03\":\"unicdoe字符 \\u001f\"}\"\n\n/* 特殊字符处理-02 */\nvar demo = {}\ndemo.special01 = '回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t';\ndemo.special02 = '双引号 \"，斜杠 /, 反斜杠\\，end ';\ndemo.special03 = 'unicdoe字符 \\u001f';\nJSON.stringify(demo);\n\n// result, 双引号被转义了，反斜杠被忽略了\n\"{\"special01\":\"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\",\"special02\":\"双引号 \\\"，斜杠 /, 反斜杠，end \",\"special03\":\"unicdoe字符 \\u001f\"}\"\n```\n\n2. 第二个参数：replacer可选项，可以是 array or function\n* 当replacer 是数组时，对第一个参数 value进行过滤，key 不在数组里的不会输出，这里需要注意的是，当第一个参数为Object时才有效，如果为Array，无效，看下面例子：\n* 当replacer 是函数时，递归遍历所有的键，可以对对象进行format and replace 等操作\n\n```js\n/* replacer 为数组 */\nJSON.stringify({\n    \"0\": \"安徽省\",\n    \"1\": \"蚌埠市\",\n    \"2\": \"固镇县\"\n}, [0,1])\n// result:\n\"{\"0\":\"安徽省\",\"1\":\"蚌埠市\"}\"\n\nJSON.stringify([\n    \"安徽省\",\n    \"蚌埠市\",\n    \"固镇县\"\n], [0,1])\n\n// result\n\"[\"安徽省\",\"蚌埠市\",\"固镇县\"]\"\n\n\n/* replacer 为函数 */\nJSON.stringify({\n    \"0\": \"安徽省\",\n    \"1\": \"蚌埠市\",\n    \"2\": \"固镇县\"\n}, function(key, value) {\n    // key: '', value: {0: \"安徽省\", 1: \"蚌埠市\", 2: \"固镇县\"}\n    console.log(key, value);\n    return value[0] + value[1] + value[2];\n})\n// result\n\"\"安徽省蚌埠市固镇县\"\"\n```\n\n3. 第三个参数：space 可选项，用于增加format字符的可读性，可取值 Number, String, 但长度不超过10个字符\n```js\nJSON.stringify({\"name\": \"煦涵\", \"age\": 28, \"male\": true, \"other\": null}, '', 4)\n\n// result \n\"{\n    \"name\": \"煦涵\",\n    \"age\": 28,\n    \"male\": true,\n    \"other\": null\n}\"\n\nJSON.stringify({\"level1\": {\"level2\": {\"level3\": {\"name\": \"煦涵\"} } } }, '', '|---')\n\n// result: 展示属性结构很直观\n\"{\n|---\"level1\": {\n|---|---\"level2\": {\n|---|---|---\"level3\": {\n|---|---|---|---\"name\": \"煦涵\"\n|---|---|---}\n|---|---}\n|---}\n}\"\n```\n4. 特殊情况\n还记得上面的几种情况吧，当对象不是原始对象时，处理方式有所不同，比如正则表达式时，会返回空对象，日期对象时返回日期字符串;参看文档是，JSON.stringify发现参数对象有toJSON方法，就直接使用这个方法的返回值作为参数，而忽略原对象的其他参数。\n\n```js\nJSON.stringify({\n    \"name\": \"煦涵\",\n    \"age\": 28,\n    \"toJSON\": function() {\n        return this.name + '年龄是' + this.age + '岁'\n    }\n})\n// result:\n\"\"煦涵年龄是28岁\"\"\n\n/* 日期对象Date原型上包含toJSON 方法，`Date.prototype.toJSON ( key )` */\nvar date = new Date();\ndate.toJSON();\nJSON.stringify(date);\n\n/* RegExp 对象 JSON.stringify 默认会把正则转换成空对象，我们可以使用toJSON, 把正则表达式转换成字符串 */\nRegExp.prototype.toJSON = RegExp.prototype.toString;\nJSON.stringify(/abc/g)\n// result\n\"\"/abc/g\"\"\n```\n\n\n### JSON.parse ( text [ , reviver ] )\nJSON.parse为 JSON.stringify的逆运算，转换时 text 必须符合JSON的语法格式， 不然会报错，reviver 参数 和 JSON.stringify 的参数 replacer类似， 但是遍历顺序和replacer相反。\n```js\nJSON.parse('{\"name\":\"煦涵\",\"age\":28,\"male\":true,\"brother\":[\"B1\",\"B2\",\"B3\"],\"parent\":{\"father\":{\"name\":\"name\"},\"mother\":{\"name\":\"name\"}},\"other\":null}' )\n\n/* result:\n{\n    \"name\": \"煦涵\",\n    \"age\" : 28,\n    \"male\" : true,\n    \"brother\": [\"B1\", \"B2\", \"B3\"],\n    \"parent\": {\n        \"father\" : {\n            \"name\": \"name\"\n        },\n        \"mother\": {\n            \"name\": \"name\"\n        }\n    },\n    \"other\": null\n}\n*/\n\nJSON.parse('{\"level1\": {\"level2\": {\"name\": \"煦涵\"} } }', function(key, value) {\n    // level2 Object {name: \"煦涵\"}\n    // level1 Object {level2: Object}\n    // Object {level1: Object}\n    console.log(key, value);\n    return value;\n})\n\n// result\n{\"level1\":{\"level2\":{\"name\":\"煦涵\"}}}\n```\n\n## 参考文档：\n[http://www.ecma-international.org/ecma-262/5.1/#sec-15.12](http://www.ecma-international.org/ecma-262/5.1/#sec-15.12)\n[https://github.com/douglascrockford/JSON-js/blob/master/json2.js](https://github.com/douglascrockford/JSON-js/blob/master/json2.js)\n[http://www.json.org/](http://www.json.org/)\n\n感谢您的阅读","source":"_posts/煦涵说Flow.md","raw":"---\ntitle: 煦涵说Flow\nauthor:\n   nick: 煦涵\n   github_name: zuojj\ndate: 2017-09-03 17:00\ncategories: 煦涵说\ntags: flow\nthumb: http://www.zuojj.com/wp-content/uploads/2017/05/flow.png\n---\nJSON(Javascript Object Notaion, javascript 对象表示法)， 是一种数据交换格式，能够在服务器端交换数据， 2001年由Douglas Crockford提出，目的是取代繁琐笨重的XML格式。\n\nJSON 数据格式的优点：\n* 与语言无关的文本数据格式\n* 轻量、简单、易维护\n* 是javascript编程语言的一个子集(**Standard ECMA-262 3rd Edition - December 1999**)， 符合javascript 语言语法，可以使用javascript提供的方法直接解析处理\n\nJSON 建立在两种数据结构上：\n* 键 / 值对：各种语言中可以为 字符串、对象、数组或者哈希表\n* 有序列表（值）：各种语言中实现为数组、向量、列表或者序列\n\n## JSON的基本语法：\n* JSON 对象\n```json\n{\n    \"key\": value\n}\n```\n* JSON 数组\n```json\n[value, value, value]\n```\n* value 可取值\nvalue 可以是 String(必须使用双引号包裹)、Number、Boolean、null、Object、Array, 这些形式可以嵌套，value值不能是八进制、十六进制（0xF0F）、undefined、function、日期对象，看下面示例：\n\n合格的 JSON 格式：\n```js\n{ \n    \"name\": \"煦涵\", \n    \"name\": null, \n    \"male\": true, \n    \"age\": 23\n}\n\n{ \n    \"brother\": [\"煦涵1\", \"煦涵2\"]\n}\n\n{ \n    \"brother\": {\n        \"煦涵1\": {\n            \"age\": 32\n        },\n        \"煦涵2\": {\n            \"age\": 30\n        }\n    }\n}\n\n[{\n    \"name\": \"煦涵”\n    \"age\": 30\n},{\n    \"name\": \"张三”\n    \"age\": 27\n}]\n```\n不合格的 JSON 格式：\n```js\n// key 必须用双引号包裹，value 如果是字符串必须用双引号包裹\n\n{ 'name': \"煦涵\" } \n[1, 2, 3, 4, oxFOF] \n{ 'name': undefined } \n{ \n    'name': function() { \n        return \"煦涵\"\n    } \n}\n{ 'name': new Date() }  \n```\n如果value的一个String（双引号包围）内包含 `\\\"`、`\\\\`、`\\/`、`\\b`、`\\f`、`\\n`、`\\r`、`\\t`、`\\u001f` 需要使用反斜杠\n如果value的一个Number，不能使用八进制和十六进制数值\nPS： value对空格没有限制要求\n\n\n## JSON 对象\n聊完 JSON 下面我们来聊聊 JSON 对象，javascript 在 ES5中新增了 JSON 对象，用来处理 JSON 文本数据，实现字符串与 JSON 对象间的相互转换，`JSON.stringify ( value [ , replacer [ , space ] ] )` 和 `JSON.parse ( text [ , reviver ] )`， 前者是把 JSON 对象转换为 JSON 字符串，后者的把 JSON 字符串解析为 JSON 对象，下面来详细看看这个两个方法。\n\n### JSON.stringify ( value [ , replacer [ , space ] ] )\n\n1. 第一个参数： Value 必须项，可以是 Object, Array, String, Boolean, Number, Null.看几个例子：\n\n```js\nJSON.stringify({\n    \"name\": \"煦涵\",\n    \"age\" : 28,\n    \"male\" : true,\n    \"brother\": [1, 2, 3],\n    \"parent\": {\n        \"father\" : {\n            \"name\": \"name\"\n        },\n        \"mother\": {\n            \"name\": \"name\"\n        }\n    },\n    \"other\": null\n})\n\n// result\n\"{\"name\":\"煦涵\",\"age\":28,\"male\":true,\"brother\":[\"B1\",\"B2\",\"B3\"],\"parent\":{\"father\":{\"name\":\"name\"},\"mother\":{\"name\":\"name\"}},\"other\":null}\" \n```\n\n当待转换值不是 JSON 的基本类型时：\n* 原始对象 item 值是 undefined、函数或 XML 对象，值会被过滤；\n* 数组 item 是 undefined、函数或 XML 对象，值会被转成 null；\n* 正则对象会被转换成空对象；\n* 对象的不可遍历属性会被忽略；\n* 八进制和十六进制会被转换成十进制;\n* 特殊字符需要转义成反斜杠\n\n```js\nJSON.stringify({\n    \"name\": undefined,\n    \"age\" : function() {return 28},\n    \"male\" : /male/g,\n    \"brother\": [undefined, function() {return abc}, \"B3\", 0xFOF],\n    \"parent\": {\n        \"father\" : {\n            \"name\": undefined\n        },\n        \"mother\": {\n            \"name\": \"name\"\n        }\n    },\n    \"other\": null\n})\n\n// result: 正则被转出了空对象，undefined, function 被忽略或者转成 null\n\n\"{\"male\":{},\"brother\":[null,null,\"B3\", 3855],\"parent\":{\"father\":{},\"mother\":{\"name\":\"name\"}},\"other\":null}\"\n\n/* 不可遍历属性 */\nvar demo = {};\nObject.defineProperties(demo, {\n    \"name\": {\n        value: \"煦涵\",\n        enumerable: false\n    },\n    \"age\": {\n        value: 28,\n        enumerable: true\n    }\n})\nJSON.stringify(demo);\n\n// enumerable: 当且仅当该属性的 enumerable 为 true 时，该属性才能够出现在对象的枚举属性中,\n// result: name 属性会被过滤\n\"{\"age\":28}\"\n\n/* 特殊字符处理-01 */\nJSON.stringify({\n    \"special01\": \"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\",\n    \"special02\": \"双引号 \\\"，单引号 ', 斜杠 \\/, 反斜杠 \\\\\",\n    \"special03\": \"unicdoe字符 \\u001f\"\n})\n\n// result\n\"{\"special01\":\"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\",\"special02\":\"双引号 \\\"，单引号 ', 斜杠 /, 反斜杠 \\\\\",\"special03\":\"unicdoe字符 \\u001f\"}\"\n\n/* 特殊字符处理-02 */\nvar demo = {}\ndemo.special01 = '回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t';\ndemo.special02 = '双引号 \"，斜杠 /, 反斜杠\\，end ';\ndemo.special03 = 'unicdoe字符 \\u001f';\nJSON.stringify(demo);\n\n// result, 双引号被转义了，反斜杠被忽略了\n\"{\"special01\":\"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\",\"special02\":\"双引号 \\\"，斜杠 /, 反斜杠，end \",\"special03\":\"unicdoe字符 \\u001f\"}\"\n```\n\n2. 第二个参数：replacer可选项，可以是 array or function\n* 当replacer 是数组时，对第一个参数 value进行过滤，key 不在数组里的不会输出，这里需要注意的是，当第一个参数为Object时才有效，如果为Array，无效，看下面例子：\n* 当replacer 是函数时，递归遍历所有的键，可以对对象进行format and replace 等操作\n\n```js\n/* replacer 为数组 */\nJSON.stringify({\n    \"0\": \"安徽省\",\n    \"1\": \"蚌埠市\",\n    \"2\": \"固镇县\"\n}, [0,1])\n// result:\n\"{\"0\":\"安徽省\",\"1\":\"蚌埠市\"}\"\n\nJSON.stringify([\n    \"安徽省\",\n    \"蚌埠市\",\n    \"固镇县\"\n], [0,1])\n\n// result\n\"[\"安徽省\",\"蚌埠市\",\"固镇县\"]\"\n\n\n/* replacer 为函数 */\nJSON.stringify({\n    \"0\": \"安徽省\",\n    \"1\": \"蚌埠市\",\n    \"2\": \"固镇县\"\n}, function(key, value) {\n    // key: '', value: {0: \"安徽省\", 1: \"蚌埠市\", 2: \"固镇县\"}\n    console.log(key, value);\n    return value[0] + value[1] + value[2];\n})\n// result\n\"\"安徽省蚌埠市固镇县\"\"\n```\n\n3. 第三个参数：space 可选项，用于增加format字符的可读性，可取值 Number, String, 但长度不超过10个字符\n```js\nJSON.stringify({\"name\": \"煦涵\", \"age\": 28, \"male\": true, \"other\": null}, '', 4)\n\n// result \n\"{\n    \"name\": \"煦涵\",\n    \"age\": 28,\n    \"male\": true,\n    \"other\": null\n}\"\n\nJSON.stringify({\"level1\": {\"level2\": {\"level3\": {\"name\": \"煦涵\"} } } }, '', '|---')\n\n// result: 展示属性结构很直观\n\"{\n|---\"level1\": {\n|---|---\"level2\": {\n|---|---|---\"level3\": {\n|---|---|---|---\"name\": \"煦涵\"\n|---|---|---}\n|---|---}\n|---}\n}\"\n```\n4. 特殊情况\n还记得上面的几种情况吧，当对象不是原始对象时，处理方式有所不同，比如正则表达式时，会返回空对象，日期对象时返回日期字符串;参看文档是，JSON.stringify发现参数对象有toJSON方法，就直接使用这个方法的返回值作为参数，而忽略原对象的其他参数。\n\n```js\nJSON.stringify({\n    \"name\": \"煦涵\",\n    \"age\": 28,\n    \"toJSON\": function() {\n        return this.name + '年龄是' + this.age + '岁'\n    }\n})\n// result:\n\"\"煦涵年龄是28岁\"\"\n\n/* 日期对象Date原型上包含toJSON 方法，`Date.prototype.toJSON ( key )` */\nvar date = new Date();\ndate.toJSON();\nJSON.stringify(date);\n\n/* RegExp 对象 JSON.stringify 默认会把正则转换成空对象，我们可以使用toJSON, 把正则表达式转换成字符串 */\nRegExp.prototype.toJSON = RegExp.prototype.toString;\nJSON.stringify(/abc/g)\n// result\n\"\"/abc/g\"\"\n```\n\n\n### JSON.parse ( text [ , reviver ] )\nJSON.parse为 JSON.stringify的逆运算，转换时 text 必须符合JSON的语法格式， 不然会报错，reviver 参数 和 JSON.stringify 的参数 replacer类似， 但是遍历顺序和replacer相反。\n```js\nJSON.parse('{\"name\":\"煦涵\",\"age\":28,\"male\":true,\"brother\":[\"B1\",\"B2\",\"B3\"],\"parent\":{\"father\":{\"name\":\"name\"},\"mother\":{\"name\":\"name\"}},\"other\":null}' )\n\n/* result:\n{\n    \"name\": \"煦涵\",\n    \"age\" : 28,\n    \"male\" : true,\n    \"brother\": [\"B1\", \"B2\", \"B3\"],\n    \"parent\": {\n        \"father\" : {\n            \"name\": \"name\"\n        },\n        \"mother\": {\n            \"name\": \"name\"\n        }\n    },\n    \"other\": null\n}\n*/\n\nJSON.parse('{\"level1\": {\"level2\": {\"name\": \"煦涵\"} } }', function(key, value) {\n    // level2 Object {name: \"煦涵\"}\n    // level1 Object {level2: Object}\n    // Object {level1: Object}\n    console.log(key, value);\n    return value;\n})\n\n// result\n{\"level1\":{\"level2\":{\"name\":\"煦涵\"}}}\n```\n\n## 参考文档：\n[http://www.ecma-international.org/ecma-262/5.1/#sec-15.12](http://www.ecma-international.org/ecma-262/5.1/#sec-15.12)\n[https://github.com/douglascrockford/JSON-js/blob/master/json2.js](https://github.com/douglascrockford/JSON-js/blob/master/json2.js)\n[http://www.json.org/](http://www.json.org/)\n\n感谢您的阅读","slug":"煦涵说Flow","published":1,"updated":"2017-09-29T15:26:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj86mtvrc000160wqqhptui0g","content":"<p>JSON(Javascript Object Notaion, javascript 对象表示法)， 是一种数据交换格式，能够在服务器端交换数据， 2001年由Douglas Crockford提出，目的是取代繁琐笨重的XML格式。</p>\n<p>JSON 数据格式的优点：</p>\n<ul>\n<li>与语言无关的文本数据格式</li>\n<li>轻量、简单、易维护</li>\n<li>是javascript编程语言的一个子集(<strong>Standard ECMA-262 3rd Edition - December 1999</strong>)， 符合javascript 语言语法，可以使用javascript提供的方法直接解析处理</li>\n</ul>\n<p>JSON 建立在两种数据结构上：</p>\n<ul>\n<li>键 / 值对：各种语言中可以为 字符串、对象、数组或者哈希表</li>\n<li>有序列表（值）：各种语言中实现为数组、向量、列表或者序列</li>\n</ul>\n<h2 id=\"JSON的基本语法：\"><a href=\"#JSON的基本语法：\" class=\"headerlink\" title=\"JSON的基本语法：\"></a>JSON的基本语法：</h2><ul>\n<li><p>JSON 对象</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"key\"</span>: value</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>JSON 数组</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[value, value, value]</div></pre></td></tr></table></figure>\n</li>\n<li><p>value 可取值<br>value 可以是 String(必须使用双引号包裹)、Number、Boolean、null、Object、Array, 这些形式可以嵌套，value值不能是八进制、十六进制（0xF0F）、undefined、function、日期对象，看下面示例：</p>\n</li>\n</ul>\n<p>合格的 JSON 格式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>, </div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"literal\">null</span>, </div><div class=\"line\">    <span class=\"string\">\"male\"</span>: <span class=\"literal\">true</span>, </div><div class=\"line\">    <span class=\"string\">\"age\"</span>: <span class=\"number\">23</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"string\">\"brother\"</span>: [<span class=\"string\">\"煦涵1\"</span>, <span class=\"string\">\"煦涵2\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"string\">\"brother\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"煦涵1\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"age\"</span>: <span class=\"number\">32</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"煦涵2\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"age\"</span>: <span class=\"number\">30</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">[&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵”</span></div><div class=\"line\"><span class=\"string\">    \"</span>age<span class=\"string\">\": 30</span></div><div class=\"line\"><span class=\"string\">&#125;,&#123;</span></div><div class=\"line\"><span class=\"string\">    \"</span>name<span class=\"string\">\": \"</span>张三”</div><div class=\"line\">    <span class=\"string\">\"age\"</span>: <span class=\"number\">27</span></div><div class=\"line\">&#125;]</div></pre></td></tr></table></figure></p>\n<p>不合格的 JSON 格式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// key 必须用双引号包裹，value 如果是字符串必须用双引号包裹</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">'name'</span>: <span class=\"string\">\"煦涵\"</span> &#125; </div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, oxFOF] </div><div class=\"line\">&#123; <span class=\"string\">'name'</span>: <span class=\"literal\">undefined</span> &#125; </div><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"string\">'name'</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"煦涵\"</span></div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div><div class=\"line\">&#123; <span class=\"string\">'name'</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;</div></pre></td></tr></table></figure></p>\n<p>如果value的一个String（双引号包围）内包含 <code>\\&quot;</code>、<code>\\\\</code>、<code>\\/</code>、<code>\\b</code>、<code>\\f</code>、<code>\\n</code>、<code>\\r</code>、<code>\\t</code>、<code>\\u001f</code> 需要使用反斜杠<br>如果value的一个Number，不能使用八进制和十六进制数值<br>PS： value对空格没有限制要求</p>\n<h2 id=\"JSON-对象\"><a href=\"#JSON-对象\" class=\"headerlink\" title=\"JSON 对象\"></a>JSON 对象</h2><p>聊完 JSON 下面我们来聊聊 JSON 对象，javascript 在 ES5中新增了 JSON 对象，用来处理 JSON 文本数据，实现字符串与 JSON 对象间的相互转换，<code>JSON.stringify ( value [ , replacer [ , space ] ] )</code> 和 <code>JSON.parse ( text [ , reviver ] )</code>， 前者是把 JSON 对象转换为 JSON 字符串，后者的把 JSON 字符串解析为 JSON 对象，下面来详细看看这个两个方法。</p>\n<h3 id=\"JSON-stringify-value-replacer-space\"><a href=\"#JSON-stringify-value-replacer-space\" class=\"headerlink\" title=\"JSON.stringify ( value [ , replacer [ , space ] ] )\"></a>JSON.stringify ( value [ , replacer [ , space ] ] )</h3><ol>\n<li>第一个参数： Value 必须项，可以是 Object, Array, String, Boolean, Number, Null.看几个例子：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>,</div><div class=\"line\">    <span class=\"string\">\"age\"</span> : <span class=\"number\">28</span>,</div><div class=\"line\">    <span class=\"string\">\"male\"</span> : <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">\"brother\"</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</div><div class=\"line\">    <span class=\"string\">\"parent\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"father\"</span> : &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"name\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"mother\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"name\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"other\"</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>煦涵<span class=\"string\">\",\"</span>age<span class=\"string\">\":28,\"</span>male<span class=\"string\">\":true,\"</span>brother<span class=\"string\">\":[\"</span>B1<span class=\"string\">\",\"</span>B2<span class=\"string\">\",\"</span>B3<span class=\"string\">\"],\"</span>parent<span class=\"string\">\":&#123;\"</span>father<span class=\"string\">\":&#123;\"</span>name<span class=\"string\">\":\"</span>name<span class=\"string\">\"&#125;,\"</span>mother<span class=\"string\">\":&#123;\"</span>name<span class=\"string\">\":\"</span>name<span class=\"string\">\"&#125;&#125;,\"</span>other<span class=\"string\">\":null&#125;\"</span></div></pre></td></tr></table></figure>\n<p>当待转换值不是 JSON 的基本类型时：</p>\n<ul>\n<li>原始对象 item 值是 undefined、函数或 XML 对象，值会被过滤；</li>\n<li>数组 item 是 undefined、函数或 XML 对象，值会被转成 null；</li>\n<li>正则对象会被转换成空对象；</li>\n<li>对象的不可遍历属性会被忽略；</li>\n<li>八进制和十六进制会被转换成十进制;</li>\n<li>特殊字符需要转义成反斜杠</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"literal\">undefined</span>,</div><div class=\"line\">    <span class=\"string\">\"age\"</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">28</span>&#125;,</div><div class=\"line\">    <span class=\"string\">\"male\"</span> : <span class=\"regexp\">/male/g</span>,</div><div class=\"line\">    <span class=\"string\">\"brother\"</span>: [<span class=\"literal\">undefined</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> abc&#125;, <span class=\"string\">\"B3\"</span>, <span class=\"number\">0xF</span>OF],</div><div class=\"line\">    <span class=\"string\">\"parent\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"father\"</span> : &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"literal\">undefined</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"mother\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"name\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"other\"</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result: 正则被转出了空对象，undefined, function 被忽略或者转成 null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>male<span class=\"string\">\":&#123;&#125;,\"</span>brother<span class=\"string\">\":[null,null,\"</span>B3<span class=\"string\">\", 3855],\"</span>parent<span class=\"string\">\":&#123;\"</span>father<span class=\"string\">\":&#123;&#125;,\"</span>mother<span class=\"string\">\":&#123;\"</span>name<span class=\"string\">\":\"</span>name<span class=\"string\">\"&#125;&#125;,\"</span>other<span class=\"string\">\":null&#125;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 不可遍历属性 */</span></div><div class=\"line\"><span class=\"keyword\">var</span> demo = &#123;&#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(demo, &#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: &#123;</div><div class=\"line\">        value: <span class=\"string\">\"煦涵\"</span>,</div><div class=\"line\">        enumerable: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"age\"</span>: &#123;</div><div class=\"line\">        value: <span class=\"number\">28</span>,</div><div class=\"line\">        enumerable: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(demo);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// enumerable: 当且仅当该属性的 enumerable 为 true 时，该属性才能够出现在对象的枚举属性中,</span></div><div class=\"line\"><span class=\"comment\">// result: name 属性会被过滤</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>age<span class=\"string\">\":28&#125;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 特殊字符处理-01 */</span></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"special01\"</span>: <span class=\"string\">\"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\"</span>,</div><div class=\"line\">    <span class=\"string\">\"special02\"</span>: <span class=\"string\">\"双引号 \\\"，单引号 ', 斜杠 \\/, 反斜杠 \\\\\"</span>,</div><div class=\"line\">    <span class=\"string\">\"special03\"</span>: <span class=\"string\">\"unicdoe字符 \\u001f\"</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>special01<span class=\"string\">\":\"</span>回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t<span class=\"string\">\",\"</span>special02<span class=\"string\">\":\"</span>双引号 \\<span class=\"string\">\"，单引号 ', 斜杠 /, 反斜杠 \\\\\"</span>,<span class=\"string\">\"special03\"</span>:<span class=\"string\">\"unicdoe字符 \\u001f\"</span>&#125;<span class=\"string\">\"</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">/* 特殊字符处理-02 */</span></div><div class=\"line\"><span class=\"string\">var demo = &#123;&#125;</span></div><div class=\"line\"><span class=\"string\">demo.special01 = '回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t';</span></div><div class=\"line\"><span class=\"string\">demo.special02 = '双引号 \"</span>，斜杠 /, 反斜杠\\，end <span class=\"string\">';</span></div><div class=\"line\"><span class=\"string\">demo.special03 = '</span>unicdoe字符 \\u001f<span class=\"string\">';</span></div><div class=\"line\"><span class=\"string\">JSON.stringify(demo);</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">// result, 双引号被转义了，反斜杠被忽略了</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"special01\":\"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\",\"special02\":\"双引号 \\\"，斜杠 /, 反斜杠，end \",\"special03\":\"unicdoe字符 \\u001f\"&#125;\"</span></div></pre></td></tr></table></figure>\n<ol>\n<li>第二个参数：replacer可选项，可以是 array or function</li>\n</ol>\n<ul>\n<li>当replacer 是数组时，对第一个参数 value进行过滤，key 不在数组里的不会输出，这里需要注意的是，当第一个参数为Object时才有效，如果为Array，无效，看下面例子：</li>\n<li>当replacer 是函数时，递归遍历所有的键，可以对对象进行format and replace 等操作</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* replacer 为数组 */</span></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"0\"</span>: <span class=\"string\">\"安徽省\"</span>,</div><div class=\"line\">    <span class=\"string\">\"1\"</span>: <span class=\"string\">\"蚌埠市\"</span>,</div><div class=\"line\">    <span class=\"string\">\"2\"</span>: <span class=\"string\">\"固镇县\"</span></div><div class=\"line\">&#125;, [<span class=\"number\">0</span>,<span class=\"number\">1</span>])</div><div class=\"line\"><span class=\"comment\">// result:</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span><span class=\"number\">0</span><span class=\"string\">\":\"</span>安徽省<span class=\"string\">\",\"</span><span class=\"number\">1</span><span class=\"string\">\":\"</span>蚌埠市<span class=\"string\">\"&#125;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify([</div><div class=\"line\">    <span class=\"string\">\"安徽省\"</span>,</div><div class=\"line\">    <span class=\"string\">\"蚌埠市\"</span>,</div><div class=\"line\">    <span class=\"string\">\"固镇县\"</span></div><div class=\"line\">], [<span class=\"number\">0</span>,<span class=\"number\">1</span>])</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"[\"</span>安徽省<span class=\"string\">\",\"</span>蚌埠市<span class=\"string\">\",\"</span>固镇县<span class=\"string\">\"]\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* replacer 为函数 */</span></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"0\"</span>: <span class=\"string\">\"安徽省\"</span>,</div><div class=\"line\">    <span class=\"string\">\"1\"</span>: <span class=\"string\">\"蚌埠市\"</span>,</div><div class=\"line\">    <span class=\"string\">\"2\"</span>: <span class=\"string\">\"固镇县\"</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// key: '', value: &#123;0: \"安徽省\", 1: \"蚌埠市\", 2: \"固镇县\"&#125;</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(key, value);</div><div class=\"line\">    <span class=\"keyword\">return</span> value[<span class=\"number\">0</span>] + value[<span class=\"number\">1</span>] + value[<span class=\"number\">2</span>];</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"\"</span>安徽省蚌埠市固镇县<span class=\"string\">\"\"</span></div></pre></td></tr></table></figure>\n<ol>\n<li><p>第三个参数：space 可选项，用于增加format字符的可读性，可取值 Number, String, 但长度不超过10个字符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>, <span class=\"string\">\"age\"</span>: <span class=\"number\">28</span>, <span class=\"string\">\"male\"</span>: <span class=\"literal\">true</span>, <span class=\"string\">\"other\"</span>: <span class=\"literal\">null</span>&#125;, <span class=\"string\">''</span>, <span class=\"number\">4</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result </span></div><div class=\"line\"><span class=\"string\">\"&#123;</span></div><div class=\"line\"><span class=\"string\">    \"</span>name<span class=\"string\">\": \"</span>煦涵<span class=\"string\">\",</span></div><div class=\"line\"><span class=\"string\">    \"</span>age<span class=\"string\">\": 28,</span></div><div class=\"line\"><span class=\"string\">    \"</span>male<span class=\"string\">\": true,</span></div><div class=\"line\"><span class=\"string\">    \"</span>other<span class=\"string\">\": null</span></div><div class=\"line\"><span class=\"string\">&#125;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;<span class=\"string\">\"level1\"</span>: &#123;<span class=\"string\">\"level2\"</span>: &#123;<span class=\"string\">\"level3\"</span>: &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>&#125; &#125; &#125; &#125;, <span class=\"string\">''</span>, <span class=\"string\">'|---'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result: 展示属性结构很直观</span></div><div class=\"line\"><span class=\"string\">\"&#123;</span></div><div class=\"line\"><span class=\"string\">|---\"</span>level1<span class=\"string\">\": &#123;</span></div><div class=\"line\"><span class=\"string\">|---|---\"</span>level2<span class=\"string\">\": &#123;</span></div><div class=\"line\"><span class=\"string\">|---|---|---\"</span>level3<span class=\"string\">\": &#123;</span></div><div class=\"line\"><span class=\"string\">|---|---|---|---\"</span>name<span class=\"string\">\": \"</span>煦涵<span class=\"string\">\"</span></div><div class=\"line\"><span class=\"string\">|---|---|---&#125;</span></div><div class=\"line\"><span class=\"string\">|---|---&#125;</span></div><div class=\"line\"><span class=\"string\">|---&#125;</span></div><div class=\"line\"><span class=\"string\">&#125;\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>特殊情况<br>还记得上面的几种情况吧，当对象不是原始对象时，处理方式有所不同，比如正则表达式时，会返回空对象，日期对象时返回日期字符串;参看文档是，JSON.stringify发现参数对象有toJSON方法，就直接使用这个方法的返回值作为参数，而忽略原对象的其他参数。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>,</div><div class=\"line\">    <span class=\"string\">\"age\"</span>: <span class=\"number\">28</span>,</div><div class=\"line\">    <span class=\"string\">\"toJSON\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">'年龄是'</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">'岁'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// result:</span></div><div class=\"line\"><span class=\"string\">\"\"</span>煦涵年龄是<span class=\"number\">28</span>岁<span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 日期对象Date原型上包含toJSON 方法，`Date.prototype.toJSON ( key )` */</span></div><div class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">date.toJSON();</div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(date);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* RegExp 对象 JSON.stringify 默认会把正则转换成空对象，我们可以使用toJSON, 把正则表达式转换成字符串 */</span></div><div class=\"line\"><span class=\"built_in\">RegExp</span>.prototype.toJSON = <span class=\"built_in\">RegExp</span>.prototype.toString;</div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(<span class=\"regexp\">/abc/g</span>)</div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"\"</span>/abc/g<span class=\"string\">\"\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"JSON-parse-text-reviver\"><a href=\"#JSON-parse-text-reviver\" class=\"headerlink\" title=\"JSON.parse ( text [ , reviver ] )\"></a>JSON.parse ( text [ , reviver ] )</h3><p>JSON.parse为 JSON.stringify的逆运算，转换时 text 必须符合JSON的语法格式， 不然会报错，reviver 参数 和 JSON.stringify 的参数 replacer类似， 但是遍历顺序和replacer相反。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.parse(<span class=\"string\">'&#123;\"name\":\"煦涵\",\"age\":28,\"male\":true,\"brother\":[\"B1\",\"B2\",\"B3\"],\"parent\":&#123;\"father\":&#123;\"name\":\"name\"&#125;,\"mother\":&#123;\"name\":\"name\"&#125;&#125;,\"other\":null&#125;'</span> )</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* result:</span></div><div class=\"line\"><span class=\"comment\">&#123;</span></div><div class=\"line\"><span class=\"comment\">    \"name\": \"煦涵\",</span></div><div class=\"line\"><span class=\"comment\">    \"age\" : 28,</span></div><div class=\"line\"><span class=\"comment\">    \"male\" : true,</span></div><div class=\"line\"><span class=\"comment\">    \"brother\": [\"B1\", \"B2\", \"B3\"],</span></div><div class=\"line\"><span class=\"comment\">    \"parent\": &#123;</span></div><div class=\"line\"><span class=\"comment\">        \"father\" : &#123;</span></div><div class=\"line\"><span class=\"comment\">            \"name\": \"name\"</span></div><div class=\"line\"><span class=\"comment\">        &#125;,</span></div><div class=\"line\"><span class=\"comment\">        \"mother\": &#123;</span></div><div class=\"line\"><span class=\"comment\">            \"name\": \"name\"</span></div><div class=\"line\"><span class=\"comment\">        &#125;</span></div><div class=\"line\"><span class=\"comment\">    &#125;,</span></div><div class=\"line\"><span class=\"comment\">    \"other\": null</span></div><div class=\"line\"><span class=\"comment\">&#125;</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">JSON</span>.parse(<span class=\"string\">'&#123;\"level1\": &#123;\"level2\": &#123;\"name\": \"煦涵\"&#125; &#125; &#125;'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// level2 Object &#123;name: \"煦涵\"&#125;</span></div><div class=\"line\">    <span class=\"comment\">// level1 Object &#123;level2: Object&#125;</span></div><div class=\"line\">    <span class=\"comment\">// Object &#123;level1: Object&#125;</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(key, value);</div><div class=\"line\">    <span class=\"keyword\">return</span> value;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\">&#123;<span class=\"string\">\"level1\"</span>:&#123;<span class=\"string\">\"level2\"</span>:&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"煦涵\"</span>&#125;&#125;&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"参考文档：\"><a href=\"#参考文档：\" class=\"headerlink\" title=\"参考文档：\"></a>参考文档：</h2><p><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.12\" target=\"_blank\" rel=\"external\">http://www.ecma-international.org/ecma-262/5.1/#sec-15.12</a><br><a href=\"https://github.com/douglascrockford/JSON-js/blob/master/json2.js\" target=\"_blank\" rel=\"external\">https://github.com/douglascrockford/JSON-js/blob/master/json2.js</a><br><a href=\"http://www.json.org/\" target=\"_blank\" rel=\"external\">http://www.json.org/</a></p>\n<p>感谢您的阅读</p>\n","site":{"data":{}},"excerpt":"","more":"<p>JSON(Javascript Object Notaion, javascript 对象表示法)， 是一种数据交换格式，能够在服务器端交换数据， 2001年由Douglas Crockford提出，目的是取代繁琐笨重的XML格式。</p>\n<p>JSON 数据格式的优点：</p>\n<ul>\n<li>与语言无关的文本数据格式</li>\n<li>轻量、简单、易维护</li>\n<li>是javascript编程语言的一个子集(<strong>Standard ECMA-262 3rd Edition - December 1999</strong>)， 符合javascript 语言语法，可以使用javascript提供的方法直接解析处理</li>\n</ul>\n<p>JSON 建立在两种数据结构上：</p>\n<ul>\n<li>键 / 值对：各种语言中可以为 字符串、对象、数组或者哈希表</li>\n<li>有序列表（值）：各种语言中实现为数组、向量、列表或者序列</li>\n</ul>\n<h2 id=\"JSON的基本语法：\"><a href=\"#JSON的基本语法：\" class=\"headerlink\" title=\"JSON的基本语法：\"></a>JSON的基本语法：</h2><ul>\n<li><p>JSON 对象</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"key\"</span>: value</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>JSON 数组</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[value, value, value]</div></pre></td></tr></table></figure>\n</li>\n<li><p>value 可取值<br>value 可以是 String(必须使用双引号包裹)、Number、Boolean、null、Object、Array, 这些形式可以嵌套，value值不能是八进制、十六进制（0xF0F）、undefined、function、日期对象，看下面示例：</p>\n</li>\n</ul>\n<p>合格的 JSON 格式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>, </div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"literal\">null</span>, </div><div class=\"line\">    <span class=\"string\">\"male\"</span>: <span class=\"literal\">true</span>, </div><div class=\"line\">    <span class=\"string\">\"age\"</span>: <span class=\"number\">23</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"string\">\"brother\"</span>: [<span class=\"string\">\"煦涵1\"</span>, <span class=\"string\">\"煦涵2\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"string\">\"brother\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"煦涵1\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"age\"</span>: <span class=\"number\">32</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"煦涵2\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"age\"</span>: <span class=\"number\">30</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">[&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵”</span></div><div class=\"line\"><span class=\"string\">    \"</span>age<span class=\"string\">\": 30</span></div><div class=\"line\"><span class=\"string\">&#125;,&#123;</span></div><div class=\"line\"><span class=\"string\">    \"</span>name<span class=\"string\">\": \"</span>张三”</div><div class=\"line\">    <span class=\"string\">\"age\"</span>: <span class=\"number\">27</span></div><div class=\"line\">&#125;]</div></pre></td></tr></table></figure></p>\n<p>不合格的 JSON 格式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// key 必须用双引号包裹，value 如果是字符串必须用双引号包裹</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">'name'</span>: <span class=\"string\">\"煦涵\"</span> &#125; </div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, oxFOF] </div><div class=\"line\">&#123; <span class=\"string\">'name'</span>: <span class=\"literal\">undefined</span> &#125; </div><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"string\">'name'</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"煦涵\"</span></div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div><div class=\"line\">&#123; <span class=\"string\">'name'</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;</div></pre></td></tr></table></figure></p>\n<p>如果value的一个String（双引号包围）内包含 <code>\\&quot;</code>、<code>\\\\</code>、<code>\\/</code>、<code>\\b</code>、<code>\\f</code>、<code>\\n</code>、<code>\\r</code>、<code>\\t</code>、<code>\\u001f</code> 需要使用反斜杠<br>如果value的一个Number，不能使用八进制和十六进制数值<br>PS： value对空格没有限制要求</p>\n<h2 id=\"JSON-对象\"><a href=\"#JSON-对象\" class=\"headerlink\" title=\"JSON 对象\"></a>JSON 对象</h2><p>聊完 JSON 下面我们来聊聊 JSON 对象，javascript 在 ES5中新增了 JSON 对象，用来处理 JSON 文本数据，实现字符串与 JSON 对象间的相互转换，<code>JSON.stringify ( value [ , replacer [ , space ] ] )</code> 和 <code>JSON.parse ( text [ , reviver ] )</code>， 前者是把 JSON 对象转换为 JSON 字符串，后者的把 JSON 字符串解析为 JSON 对象，下面来详细看看这个两个方法。</p>\n<h3 id=\"JSON-stringify-value-replacer-space\"><a href=\"#JSON-stringify-value-replacer-space\" class=\"headerlink\" title=\"JSON.stringify ( value [ , replacer [ , space ] ] )\"></a>JSON.stringify ( value [ , replacer [ , space ] ] )</h3><ol>\n<li>第一个参数： Value 必须项，可以是 Object, Array, String, Boolean, Number, Null.看几个例子：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>,</div><div class=\"line\">    <span class=\"string\">\"age\"</span> : <span class=\"number\">28</span>,</div><div class=\"line\">    <span class=\"string\">\"male\"</span> : <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">\"brother\"</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</div><div class=\"line\">    <span class=\"string\">\"parent\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"father\"</span> : &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"name\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"mother\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"name\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"other\"</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>煦涵<span class=\"string\">\",\"</span>age<span class=\"string\">\":28,\"</span>male<span class=\"string\">\":true,\"</span>brother<span class=\"string\">\":[\"</span>B1<span class=\"string\">\",\"</span>B2<span class=\"string\">\",\"</span>B3<span class=\"string\">\"],\"</span>parent<span class=\"string\">\":&#123;\"</span>father<span class=\"string\">\":&#123;\"</span>name<span class=\"string\">\":\"</span>name<span class=\"string\">\"&#125;,\"</span>mother<span class=\"string\">\":&#123;\"</span>name<span class=\"string\">\":\"</span>name<span class=\"string\">\"&#125;&#125;,\"</span>other<span class=\"string\">\":null&#125;\"</span></div></pre></td></tr></table></figure>\n<p>当待转换值不是 JSON 的基本类型时：</p>\n<ul>\n<li>原始对象 item 值是 undefined、函数或 XML 对象，值会被过滤；</li>\n<li>数组 item 是 undefined、函数或 XML 对象，值会被转成 null；</li>\n<li>正则对象会被转换成空对象；</li>\n<li>对象的不可遍历属性会被忽略；</li>\n<li>八进制和十六进制会被转换成十进制;</li>\n<li>特殊字符需要转义成反斜杠</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"literal\">undefined</span>,</div><div class=\"line\">    <span class=\"string\">\"age\"</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">28</span>&#125;,</div><div class=\"line\">    <span class=\"string\">\"male\"</span> : <span class=\"regexp\">/male/g</span>,</div><div class=\"line\">    <span class=\"string\">\"brother\"</span>: [<span class=\"literal\">undefined</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> abc&#125;, <span class=\"string\">\"B3\"</span>, <span class=\"number\">0xF</span>OF],</div><div class=\"line\">    <span class=\"string\">\"parent\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"father\"</span> : &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"literal\">undefined</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"mother\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"name\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"other\"</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result: 正则被转出了空对象，undefined, function 被忽略或者转成 null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>male<span class=\"string\">\":&#123;&#125;,\"</span>brother<span class=\"string\">\":[null,null,\"</span>B3<span class=\"string\">\", 3855],\"</span>parent<span class=\"string\">\":&#123;\"</span>father<span class=\"string\">\":&#123;&#125;,\"</span>mother<span class=\"string\">\":&#123;\"</span>name<span class=\"string\">\":\"</span>name<span class=\"string\">\"&#125;&#125;,\"</span>other<span class=\"string\">\":null&#125;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 不可遍历属性 */</span></div><div class=\"line\"><span class=\"keyword\">var</span> demo = &#123;&#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(demo, &#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: &#123;</div><div class=\"line\">        value: <span class=\"string\">\"煦涵\"</span>,</div><div class=\"line\">        enumerable: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"age\"</span>: &#123;</div><div class=\"line\">        value: <span class=\"number\">28</span>,</div><div class=\"line\">        enumerable: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(demo);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// enumerable: 当且仅当该属性的 enumerable 为 true 时，该属性才能够出现在对象的枚举属性中,</span></div><div class=\"line\"><span class=\"comment\">// result: name 属性会被过滤</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>age<span class=\"string\">\":28&#125;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 特殊字符处理-01 */</span></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"special01\"</span>: <span class=\"string\">\"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\"</span>,</div><div class=\"line\">    <span class=\"string\">\"special02\"</span>: <span class=\"string\">\"双引号 \\\"，单引号 ', 斜杠 \\/, 反斜杠 \\\\\"</span>,</div><div class=\"line\">    <span class=\"string\">\"special03\"</span>: <span class=\"string\">\"unicdoe字符 \\u001f\"</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>special01<span class=\"string\">\":\"</span>回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t<span class=\"string\">\",\"</span>special02<span class=\"string\">\":\"</span>双引号 \\<span class=\"string\">\"，单引号 ', 斜杠 /, 反斜杠 \\\\\"</span>,<span class=\"string\">\"special03\"</span>:<span class=\"string\">\"unicdoe字符 \\u001f\"</span>&#125;<span class=\"string\">\"</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">/* 特殊字符处理-02 */</span></div><div class=\"line\"><span class=\"string\">var demo = &#123;&#125;</span></div><div class=\"line\"><span class=\"string\">demo.special01 = '回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t';</span></div><div class=\"line\"><span class=\"string\">demo.special02 = '双引号 \"</span>，斜杠 /, 反斜杠\\，end <span class=\"string\">';</span></div><div class=\"line\"><span class=\"string\">demo.special03 = '</span>unicdoe字符 \\u001f<span class=\"string\">';</span></div><div class=\"line\"><span class=\"string\">JSON.stringify(demo);</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">// result, 双引号被转义了，反斜杠被忽略了</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"special01\":\"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\",\"special02\":\"双引号 \\\"，斜杠 /, 反斜杠，end \",\"special03\":\"unicdoe字符 \\u001f\"&#125;\"</span></div></pre></td></tr></table></figure>\n<ol>\n<li>第二个参数：replacer可选项，可以是 array or function</li>\n</ol>\n<ul>\n<li>当replacer 是数组时，对第一个参数 value进行过滤，key 不在数组里的不会输出，这里需要注意的是，当第一个参数为Object时才有效，如果为Array，无效，看下面例子：</li>\n<li>当replacer 是函数时，递归遍历所有的键，可以对对象进行format and replace 等操作</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* replacer 为数组 */</span></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"0\"</span>: <span class=\"string\">\"安徽省\"</span>,</div><div class=\"line\">    <span class=\"string\">\"1\"</span>: <span class=\"string\">\"蚌埠市\"</span>,</div><div class=\"line\">    <span class=\"string\">\"2\"</span>: <span class=\"string\">\"固镇县\"</span></div><div class=\"line\">&#125;, [<span class=\"number\">0</span>,<span class=\"number\">1</span>])</div><div class=\"line\"><span class=\"comment\">// result:</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span><span class=\"number\">0</span><span class=\"string\">\":\"</span>安徽省<span class=\"string\">\",\"</span><span class=\"number\">1</span><span class=\"string\">\":\"</span>蚌埠市<span class=\"string\">\"&#125;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify([</div><div class=\"line\">    <span class=\"string\">\"安徽省\"</span>,</div><div class=\"line\">    <span class=\"string\">\"蚌埠市\"</span>,</div><div class=\"line\">    <span class=\"string\">\"固镇县\"</span></div><div class=\"line\">], [<span class=\"number\">0</span>,<span class=\"number\">1</span>])</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"[\"</span>安徽省<span class=\"string\">\",\"</span>蚌埠市<span class=\"string\">\",\"</span>固镇县<span class=\"string\">\"]\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* replacer 为函数 */</span></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"0\"</span>: <span class=\"string\">\"安徽省\"</span>,</div><div class=\"line\">    <span class=\"string\">\"1\"</span>: <span class=\"string\">\"蚌埠市\"</span>,</div><div class=\"line\">    <span class=\"string\">\"2\"</span>: <span class=\"string\">\"固镇县\"</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// key: '', value: &#123;0: \"安徽省\", 1: \"蚌埠市\", 2: \"固镇县\"&#125;</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(key, value);</div><div class=\"line\">    <span class=\"keyword\">return</span> value[<span class=\"number\">0</span>] + value[<span class=\"number\">1</span>] + value[<span class=\"number\">2</span>];</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"\"</span>安徽省蚌埠市固镇县<span class=\"string\">\"\"</span></div></pre></td></tr></table></figure>\n<ol>\n<li><p>第三个参数：space 可选项，用于增加format字符的可读性，可取值 Number, String, 但长度不超过10个字符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>, <span class=\"string\">\"age\"</span>: <span class=\"number\">28</span>, <span class=\"string\">\"male\"</span>: <span class=\"literal\">true</span>, <span class=\"string\">\"other\"</span>: <span class=\"literal\">null</span>&#125;, <span class=\"string\">''</span>, <span class=\"number\">4</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result </span></div><div class=\"line\"><span class=\"string\">\"&#123;</span></div><div class=\"line\"><span class=\"string\">    \"</span>name<span class=\"string\">\": \"</span>煦涵<span class=\"string\">\",</span></div><div class=\"line\"><span class=\"string\">    \"</span>age<span class=\"string\">\": 28,</span></div><div class=\"line\"><span class=\"string\">    \"</span>male<span class=\"string\">\": true,</span></div><div class=\"line\"><span class=\"string\">    \"</span>other<span class=\"string\">\": null</span></div><div class=\"line\"><span class=\"string\">&#125;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;<span class=\"string\">\"level1\"</span>: &#123;<span class=\"string\">\"level2\"</span>: &#123;<span class=\"string\">\"level3\"</span>: &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>&#125; &#125; &#125; &#125;, <span class=\"string\">''</span>, <span class=\"string\">'|---'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result: 展示属性结构很直观</span></div><div class=\"line\"><span class=\"string\">\"&#123;</span></div><div class=\"line\"><span class=\"string\">|---\"</span>level1<span class=\"string\">\": &#123;</span></div><div class=\"line\"><span class=\"string\">|---|---\"</span>level2<span class=\"string\">\": &#123;</span></div><div class=\"line\"><span class=\"string\">|---|---|---\"</span>level3<span class=\"string\">\": &#123;</span></div><div class=\"line\"><span class=\"string\">|---|---|---|---\"</span>name<span class=\"string\">\": \"</span>煦涵<span class=\"string\">\"</span></div><div class=\"line\"><span class=\"string\">|---|---|---&#125;</span></div><div class=\"line\"><span class=\"string\">|---|---&#125;</span></div><div class=\"line\"><span class=\"string\">|---&#125;</span></div><div class=\"line\"><span class=\"string\">&#125;\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>特殊情况<br>还记得上面的几种情况吧，当对象不是原始对象时，处理方式有所不同，比如正则表达式时，会返回空对象，日期对象时返回日期字符串;参看文档是，JSON.stringify发现参数对象有toJSON方法，就直接使用这个方法的返回值作为参数，而忽略原对象的其他参数。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>,</div><div class=\"line\">    <span class=\"string\">\"age\"</span>: <span class=\"number\">28</span>,</div><div class=\"line\">    <span class=\"string\">\"toJSON\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">'年龄是'</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">'岁'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// result:</span></div><div class=\"line\"><span class=\"string\">\"\"</span>煦涵年龄是<span class=\"number\">28</span>岁<span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 日期对象Date原型上包含toJSON 方法，`Date.prototype.toJSON ( key )` */</span></div><div class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">date.toJSON();</div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(date);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* RegExp 对象 JSON.stringify 默认会把正则转换成空对象，我们可以使用toJSON, 把正则表达式转换成字符串 */</span></div><div class=\"line\"><span class=\"built_in\">RegExp</span>.prototype.toJSON = <span class=\"built_in\">RegExp</span>.prototype.toString;</div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(<span class=\"regexp\">/abc/g</span>)</div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"\"</span>/abc/g<span class=\"string\">\"\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"JSON-parse-text-reviver\"><a href=\"#JSON-parse-text-reviver\" class=\"headerlink\" title=\"JSON.parse ( text [ , reviver ] )\"></a>JSON.parse ( text [ , reviver ] )</h3><p>JSON.parse为 JSON.stringify的逆运算，转换时 text 必须符合JSON的语法格式， 不然会报错，reviver 参数 和 JSON.stringify 的参数 replacer类似， 但是遍历顺序和replacer相反。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.parse(<span class=\"string\">'&#123;\"name\":\"煦涵\",\"age\":28,\"male\":true,\"brother\":[\"B1\",\"B2\",\"B3\"],\"parent\":&#123;\"father\":&#123;\"name\":\"name\"&#125;,\"mother\":&#123;\"name\":\"name\"&#125;&#125;,\"other\":null&#125;'</span> )</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* result:</span></div><div class=\"line\"><span class=\"comment\">&#123;</span></div><div class=\"line\"><span class=\"comment\">    \"name\": \"煦涵\",</span></div><div class=\"line\"><span class=\"comment\">    \"age\" : 28,</span></div><div class=\"line\"><span class=\"comment\">    \"male\" : true,</span></div><div class=\"line\"><span class=\"comment\">    \"brother\": [\"B1\", \"B2\", \"B3\"],</span></div><div class=\"line\"><span class=\"comment\">    \"parent\": &#123;</span></div><div class=\"line\"><span class=\"comment\">        \"father\" : &#123;</span></div><div class=\"line\"><span class=\"comment\">            \"name\": \"name\"</span></div><div class=\"line\"><span class=\"comment\">        &#125;,</span></div><div class=\"line\"><span class=\"comment\">        \"mother\": &#123;</span></div><div class=\"line\"><span class=\"comment\">            \"name\": \"name\"</span></div><div class=\"line\"><span class=\"comment\">        &#125;</span></div><div class=\"line\"><span class=\"comment\">    &#125;,</span></div><div class=\"line\"><span class=\"comment\">    \"other\": null</span></div><div class=\"line\"><span class=\"comment\">&#125;</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">JSON</span>.parse(<span class=\"string\">'&#123;\"level1\": &#123;\"level2\": &#123;\"name\": \"煦涵\"&#125; &#125; &#125;'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// level2 Object &#123;name: \"煦涵\"&#125;</span></div><div class=\"line\">    <span class=\"comment\">// level1 Object &#123;level2: Object&#125;</span></div><div class=\"line\">    <span class=\"comment\">// Object &#123;level1: Object&#125;</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(key, value);</div><div class=\"line\">    <span class=\"keyword\">return</span> value;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\">&#123;<span class=\"string\">\"level1\"</span>:&#123;<span class=\"string\">\"level2\"</span>:&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"煦涵\"</span>&#125;&#125;&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"参考文档：\"><a href=\"#参考文档：\" class=\"headerlink\" title=\"参考文档：\"></a>参考文档：</h2><p><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.12\" target=\"_blank\" rel=\"external\">http://www.ecma-international.org/ecma-262/5.1/#sec-15.12</a><br><a href=\"https://github.com/douglascrockford/JSON-js/blob/master/json2.js\" target=\"_blank\" rel=\"external\">https://github.com/douglascrockford/JSON-js/blob/master/json2.js</a><br><a href=\"http://www.json.org/\" target=\"_blank\" rel=\"external\">http://www.json.org/</a></p>\n<p>感谢您的阅读</p>\n"},{"title":"煦涵说JSON","author":{"nick":"煦涵","github_name":"zuojj"},"date":"2017-09-03T09:00:00.000Z","thumb":"http://www.zuojj.com/wp-content/uploads/2017/05/0-1.jpeg","_content":"JSON(Javascript Object Notaion, javascript 对象表示法)， 是一种数据交换格式，能够在服务器端交换数据， 2001年由Douglas Crockford提出，目的是取代繁琐笨重的XML格式。\n\nJSON 数据格式的优点：\n* 与语言无关的文本数据格式\n* 轻量、简单、易维护\n* 是javascript编程语言的一个子集(**Standard ECMA-262 3rd Edition - December 1999**)， 符合javascript 语言语法，可以使用javascript提供的方法直接解析处理\n\nJSON 建立在两种数据结构上：\n* 键 / 值对：各种语言中可以为 字符串、对象、数组或者哈希表\n* 有序列表（值）：各种语言中实现为数组、向量、列表或者序列\n\n## JSON的基本语法：\n* JSON 对象\n```json\n{\n    \"key\": value\n}\n```\n* JSON 数组\n```json\n[value, value, value]\n```\n* value 可取值\nvalue 可以是 String(必须使用双引号包裹)、Number、Boolean、null、Object、Array, 这些形式可以嵌套，value值不能是八进制、十六进制（0xF0F）、undefined、function、日期对象，看下面示例：\n\n合格的 JSON 格式：\n```js\n{ \n    \"name\": \"煦涵\", \n    \"name\": null, \n    \"male\": true, \n    \"age\": 23\n}\n\n{ \n    \"brother\": [\"煦涵1\", \"煦涵2\"]\n}\n\n{ \n    \"brother\": {\n        \"煦涵1\": {\n            \"age\": 32\n        },\n        \"煦涵2\": {\n            \"age\": 30\n        }\n    }\n}\n\n[{\n    \"name\": \"煦涵”\n    \"age\": 30\n},{\n    \"name\": \"张三”\n    \"age\": 27\n}]\n```\n不合格的 JSON 格式：\n```js\n// key 必须用双引号包裹，value 如果是字符串必须用双引号包裹\n\n{ 'name': \"煦涵\" } \n[1, 2, 3, 4, oxFOF] \n{ 'name': undefined } \n{ \n    'name': function() { \n        return \"煦涵\"\n    } \n}\n{ 'name': new Date() }  \n```\n如果value的一个String（双引号包围）内包含 `\\\"`、`\\\\`、`\\/`、`\\b`、`\\f`、`\\n`、`\\r`、`\\t`、`\\u001f` 需要使用反斜杠\n如果value的一个Number，不能使用八进制和十六进制数值\nPS： value对空格没有限制要求\n\n\n## JSON 对象\n聊完 JSON 下面我们来聊聊 JSON 对象，javascript 在 ES5中新增了 JSON 对象，用来处理 JSON 文本数据，实现字符串与 JSON 对象间的相互转换，`JSON.stringify ( value [ , replacer [ , space ] ] )` 和 `JSON.parse ( text [ , reviver ] )`， 前者是把 JSON 对象转换为 JSON 字符串，后者的把 JSON 字符串解析为 JSON 对象，下面来详细看看这个两个方法。\n\n### JSON.stringify ( value [ , replacer [ , space ] ] )\n\n1. 第一个参数： Value 必须项，可以是 Object, Array, String, Boolean, Number, Null.看几个例子：\n\n```js\nJSON.stringify({\n    \"name\": \"煦涵\",\n    \"age\" : 28,\n    \"male\" : true,\n    \"brother\": [1, 2, 3],\n    \"parent\": {\n        \"father\" : {\n            \"name\": \"name\"\n        },\n        \"mother\": {\n            \"name\": \"name\"\n        }\n    },\n    \"other\": null\n})\n\n// result\n\"{\"name\":\"煦涵\",\"age\":28,\"male\":true,\"brother\":[\"B1\",\"B2\",\"B3\"],\"parent\":{\"father\":{\"name\":\"name\"},\"mother\":{\"name\":\"name\"}},\"other\":null}\" \n```\n\n当待转换值不是 JSON 的基本类型时：\n* 原始对象 item 值是 undefined、函数或 XML 对象，值会被过滤；\n* 数组 item 是 undefined、函数或 XML 对象，值会被转成 null；\n* 正则对象会被转换成空对象；\n* 对象的不可遍历属性会被忽略；\n* 八进制和十六进制会被转换成十进制;\n* 特殊字符需要转义成反斜杠\n\n```js\nJSON.stringify({\n    \"name\": undefined,\n    \"age\" : function() {return 28},\n    \"male\" : /male/g,\n    \"brother\": [undefined, function() {return abc}, \"B3\", 0xFOF],\n    \"parent\": {\n        \"father\" : {\n            \"name\": undefined\n        },\n        \"mother\": {\n            \"name\": \"name\"\n        }\n    },\n    \"other\": null\n})\n\n// result: 正则被转出了空对象，undefined, function 被忽略或者转成 null\n\n\"{\"male\":{},\"brother\":[null,null,\"B3\", 3855],\"parent\":{\"father\":{},\"mother\":{\"name\":\"name\"}},\"other\":null}\"\n\n/* 不可遍历属性 */\nvar demo = {};\nObject.defineProperties(demo, {\n    \"name\": {\n        value: \"煦涵\",\n        enumerable: false\n    },\n    \"age\": {\n        value: 28,\n        enumerable: true\n    }\n})\nJSON.stringify(demo);\n\n// enumerable: 当且仅当该属性的 enumerable 为 true 时，该属性才能够出现在对象的枚举属性中,\n// result: name 属性会被过滤\n\"{\"age\":28}\"\n\n/* 特殊字符处理-01 */\nJSON.stringify({\n    \"special01\": \"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\",\n    \"special02\": \"双引号 \\\"，单引号 ', 斜杠 \\/, 反斜杠 \\\\\",\n    \"special03\": \"unicdoe字符 \\u001f\"\n})\n\n// result\n\"{\"special01\":\"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\",\"special02\":\"双引号 \\\"，单引号 ', 斜杠 /, 反斜杠 \\\\\",\"special03\":\"unicdoe字符 \\u001f\"}\"\n\n/* 特殊字符处理-02 */\nvar demo = {}\ndemo.special01 = '回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t';\ndemo.special02 = '双引号 \"，斜杠 /, 反斜杠\\，end ';\ndemo.special03 = 'unicdoe字符 \\u001f';\nJSON.stringify(demo);\n\n// result, 双引号被转义了，反斜杠被忽略了\n\"{\"special01\":\"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\",\"special02\":\"双引号 \\\"，斜杠 /, 反斜杠，end \",\"special03\":\"unicdoe字符 \\u001f\"}\"\n```\n\n2. 第二个参数：replacer可选项，可以是 array or function\n* 当replacer 是数组时，对第一个参数 value进行过滤，key 不在数组里的不会输出，这里需要注意的是，当第一个参数为Object时才有效，如果为Array，无效，看下面例子：\n* 当replacer 是函数时，递归遍历所有的键，可以对对象进行format and replace 等操作\n\n```js\n/* replacer 为数组 */\nJSON.stringify({\n    \"0\": \"安徽省\",\n    \"1\": \"蚌埠市\",\n    \"2\": \"固镇县\"\n}, [0,1])\n// result:\n\"{\"0\":\"安徽省\",\"1\":\"蚌埠市\"}\"\n\nJSON.stringify([\n    \"安徽省\",\n    \"蚌埠市\",\n    \"固镇县\"\n], [0,1])\n\n// result\n\"[\"安徽省\",\"蚌埠市\",\"固镇县\"]\"\n\n\n/* replacer 为函数 */\nJSON.stringify({\n    \"0\": \"安徽省\",\n    \"1\": \"蚌埠市\",\n    \"2\": \"固镇县\"\n}, function(key, value) {\n    // key: '', value: {0: \"安徽省\", 1: \"蚌埠市\", 2: \"固镇县\"}\n    console.log(key, value);\n    return value[0] + value[1] + value[2];\n})\n// result\n\"\"安徽省蚌埠市固镇县\"\"\n```\n\n3. 第三个参数：space 可选项，用于增加format字符的可读性，可取值 Number, String, 但长度不超过10个字符\n```js\nJSON.stringify({\"name\": \"煦涵\", \"age\": 28, \"male\": true, \"other\": null}, '', 4)\n\n// result \n\"{\n    \"name\": \"煦涵\",\n    \"age\": 28,\n    \"male\": true,\n    \"other\": null\n}\"\n\nJSON.stringify({\"level1\": {\"level2\": {\"level3\": {\"name\": \"煦涵\"} } } }, '', '|---')\n\n// result: 展示属性结构很直观\n\"{\n|---\"level1\": {\n|---|---\"level2\": {\n|---|---|---\"level3\": {\n|---|---|---|---\"name\": \"煦涵\"\n|---|---|---}\n|---|---}\n|---}\n}\"\n```\n4. 特殊情况\n还记得上面的几种情况吧，当对象不是原始对象时，处理方式有所不同，比如正则表达式时，会返回空对象，日期对象时返回日期字符串;参看文档是，JSON.stringify发现参数对象有toJSON方法，就直接使用这个方法的返回值作为参数，而忽略原对象的其他参数。\n\n```js\nJSON.stringify({\n    \"name\": \"煦涵\",\n    \"age\": 28,\n    \"toJSON\": function() {\n        return this.name + '年龄是' + this.age + '岁'\n    }\n})\n// result:\n\"\"煦涵年龄是28岁\"\"\n\n/* 日期对象Date原型上包含toJSON 方法，`Date.prototype.toJSON ( key )` */\nvar date = new Date();\ndate.toJSON();\nJSON.stringify(date);\n\n/* RegExp 对象 JSON.stringify 默认会把正则转换成空对象，我们可以使用toJSON, 把正则表达式转换成字符串 */\nRegExp.prototype.toJSON = RegExp.prototype.toString;\nJSON.stringify(/abc/g)\n// result\n\"\"/abc/g\"\"\n```\n\n\n### JSON.parse ( text [ , reviver ] )\nJSON.parse为 JSON.stringify的逆运算，转换时 text 必须符合JSON的语法格式， 不然会报错，reviver 参数 和 JSON.stringify 的参数 replacer类似， 但是遍历顺序和replacer相反。\n```js\nJSON.parse('{\"name\":\"煦涵\",\"age\":28,\"male\":true,\"brother\":[\"B1\",\"B2\",\"B3\"],\"parent\":{\"father\":{\"name\":\"name\"},\"mother\":{\"name\":\"name\"}},\"other\":null}' )\n\n/* result:\n{\n    \"name\": \"煦涵\",\n    \"age\" : 28,\n    \"male\" : true,\n    \"brother\": [\"B1\", \"B2\", \"B3\"],\n    \"parent\": {\n        \"father\" : {\n            \"name\": \"name\"\n        },\n        \"mother\": {\n            \"name\": \"name\"\n        }\n    },\n    \"other\": null\n}\n*/\n\nJSON.parse('{\"level1\": {\"level2\": {\"name\": \"煦涵\"} } }', function(key, value) {\n    // level2 Object {name: \"煦涵\"}\n    // level1 Object {level2: Object}\n    // Object {level1: Object}\n    console.log(key, value);\n    return value;\n})\n\n// result\n{\"level1\":{\"level2\":{\"name\":\"煦涵\"}}}\n```\n\n## 参考文档：\n[http://www.ecma-international.org/ecma-262/5.1/#sec-15.12](http://www.ecma-international.org/ecma-262/5.1/#sec-15.12)\n[https://github.com/douglascrockford/JSON-js/blob/master/json2.js](https://github.com/douglascrockford/JSON-js/blob/master/json2.js)\n[http://www.json.org/](http://www.json.org/)\n\n感谢您的阅读","source":"_posts/煦涵说JSON.md","raw":"---\ntitle: 煦涵说JSON\nauthor:\n   nick: 煦涵\n   github_name: zuojj\ndate: 2017-09-03 17:00\ncategories: 煦涵说\ntags: json\nthumb: http://www.zuojj.com/wp-content/uploads/2017/05/0-1.jpeg\n---\nJSON(Javascript Object Notaion, javascript 对象表示法)， 是一种数据交换格式，能够在服务器端交换数据， 2001年由Douglas Crockford提出，目的是取代繁琐笨重的XML格式。\n\nJSON 数据格式的优点：\n* 与语言无关的文本数据格式\n* 轻量、简单、易维护\n* 是javascript编程语言的一个子集(**Standard ECMA-262 3rd Edition - December 1999**)， 符合javascript 语言语法，可以使用javascript提供的方法直接解析处理\n\nJSON 建立在两种数据结构上：\n* 键 / 值对：各种语言中可以为 字符串、对象、数组或者哈希表\n* 有序列表（值）：各种语言中实现为数组、向量、列表或者序列\n\n## JSON的基本语法：\n* JSON 对象\n```json\n{\n    \"key\": value\n}\n```\n* JSON 数组\n```json\n[value, value, value]\n```\n* value 可取值\nvalue 可以是 String(必须使用双引号包裹)、Number、Boolean、null、Object、Array, 这些形式可以嵌套，value值不能是八进制、十六进制（0xF0F）、undefined、function、日期对象，看下面示例：\n\n合格的 JSON 格式：\n```js\n{ \n    \"name\": \"煦涵\", \n    \"name\": null, \n    \"male\": true, \n    \"age\": 23\n}\n\n{ \n    \"brother\": [\"煦涵1\", \"煦涵2\"]\n}\n\n{ \n    \"brother\": {\n        \"煦涵1\": {\n            \"age\": 32\n        },\n        \"煦涵2\": {\n            \"age\": 30\n        }\n    }\n}\n\n[{\n    \"name\": \"煦涵”\n    \"age\": 30\n},{\n    \"name\": \"张三”\n    \"age\": 27\n}]\n```\n不合格的 JSON 格式：\n```js\n// key 必须用双引号包裹，value 如果是字符串必须用双引号包裹\n\n{ 'name': \"煦涵\" } \n[1, 2, 3, 4, oxFOF] \n{ 'name': undefined } \n{ \n    'name': function() { \n        return \"煦涵\"\n    } \n}\n{ 'name': new Date() }  \n```\n如果value的一个String（双引号包围）内包含 `\\\"`、`\\\\`、`\\/`、`\\b`、`\\f`、`\\n`、`\\r`、`\\t`、`\\u001f` 需要使用反斜杠\n如果value的一个Number，不能使用八进制和十六进制数值\nPS： value对空格没有限制要求\n\n\n## JSON 对象\n聊完 JSON 下面我们来聊聊 JSON 对象，javascript 在 ES5中新增了 JSON 对象，用来处理 JSON 文本数据，实现字符串与 JSON 对象间的相互转换，`JSON.stringify ( value [ , replacer [ , space ] ] )` 和 `JSON.parse ( text [ , reviver ] )`， 前者是把 JSON 对象转换为 JSON 字符串，后者的把 JSON 字符串解析为 JSON 对象，下面来详细看看这个两个方法。\n\n### JSON.stringify ( value [ , replacer [ , space ] ] )\n\n1. 第一个参数： Value 必须项，可以是 Object, Array, String, Boolean, Number, Null.看几个例子：\n\n```js\nJSON.stringify({\n    \"name\": \"煦涵\",\n    \"age\" : 28,\n    \"male\" : true,\n    \"brother\": [1, 2, 3],\n    \"parent\": {\n        \"father\" : {\n            \"name\": \"name\"\n        },\n        \"mother\": {\n            \"name\": \"name\"\n        }\n    },\n    \"other\": null\n})\n\n// result\n\"{\"name\":\"煦涵\",\"age\":28,\"male\":true,\"brother\":[\"B1\",\"B2\",\"B3\"],\"parent\":{\"father\":{\"name\":\"name\"},\"mother\":{\"name\":\"name\"}},\"other\":null}\" \n```\n\n当待转换值不是 JSON 的基本类型时：\n* 原始对象 item 值是 undefined、函数或 XML 对象，值会被过滤；\n* 数组 item 是 undefined、函数或 XML 对象，值会被转成 null；\n* 正则对象会被转换成空对象；\n* 对象的不可遍历属性会被忽略；\n* 八进制和十六进制会被转换成十进制;\n* 特殊字符需要转义成反斜杠\n\n```js\nJSON.stringify({\n    \"name\": undefined,\n    \"age\" : function() {return 28},\n    \"male\" : /male/g,\n    \"brother\": [undefined, function() {return abc}, \"B3\", 0xFOF],\n    \"parent\": {\n        \"father\" : {\n            \"name\": undefined\n        },\n        \"mother\": {\n            \"name\": \"name\"\n        }\n    },\n    \"other\": null\n})\n\n// result: 正则被转出了空对象，undefined, function 被忽略或者转成 null\n\n\"{\"male\":{},\"brother\":[null,null,\"B3\", 3855],\"parent\":{\"father\":{},\"mother\":{\"name\":\"name\"}},\"other\":null}\"\n\n/* 不可遍历属性 */\nvar demo = {};\nObject.defineProperties(demo, {\n    \"name\": {\n        value: \"煦涵\",\n        enumerable: false\n    },\n    \"age\": {\n        value: 28,\n        enumerable: true\n    }\n})\nJSON.stringify(demo);\n\n// enumerable: 当且仅当该属性的 enumerable 为 true 时，该属性才能够出现在对象的枚举属性中,\n// result: name 属性会被过滤\n\"{\"age\":28}\"\n\n/* 特殊字符处理-01 */\nJSON.stringify({\n    \"special01\": \"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\",\n    \"special02\": \"双引号 \\\"，单引号 ', 斜杠 \\/, 反斜杠 \\\\\",\n    \"special03\": \"unicdoe字符 \\u001f\"\n})\n\n// result\n\"{\"special01\":\"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\",\"special02\":\"双引号 \\\"，单引号 ', 斜杠 /, 反斜杠 \\\\\",\"special03\":\"unicdoe字符 \\u001f\"}\"\n\n/* 特殊字符处理-02 */\nvar demo = {}\ndemo.special01 = '回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t';\ndemo.special02 = '双引号 \"，斜杠 /, 反斜杠\\，end ';\ndemo.special03 = 'unicdoe字符 \\u001f';\nJSON.stringify(demo);\n\n// result, 双引号被转义了，反斜杠被忽略了\n\"{\"special01\":\"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\",\"special02\":\"双引号 \\\"，斜杠 /, 反斜杠，end \",\"special03\":\"unicdoe字符 \\u001f\"}\"\n```\n\n2. 第二个参数：replacer可选项，可以是 array or function\n* 当replacer 是数组时，对第一个参数 value进行过滤，key 不在数组里的不会输出，这里需要注意的是，当第一个参数为Object时才有效，如果为Array，无效，看下面例子：\n* 当replacer 是函数时，递归遍历所有的键，可以对对象进行format and replace 等操作\n\n```js\n/* replacer 为数组 */\nJSON.stringify({\n    \"0\": \"安徽省\",\n    \"1\": \"蚌埠市\",\n    \"2\": \"固镇县\"\n}, [0,1])\n// result:\n\"{\"0\":\"安徽省\",\"1\":\"蚌埠市\"}\"\n\nJSON.stringify([\n    \"安徽省\",\n    \"蚌埠市\",\n    \"固镇县\"\n], [0,1])\n\n// result\n\"[\"安徽省\",\"蚌埠市\",\"固镇县\"]\"\n\n\n/* replacer 为函数 */\nJSON.stringify({\n    \"0\": \"安徽省\",\n    \"1\": \"蚌埠市\",\n    \"2\": \"固镇县\"\n}, function(key, value) {\n    // key: '', value: {0: \"安徽省\", 1: \"蚌埠市\", 2: \"固镇县\"}\n    console.log(key, value);\n    return value[0] + value[1] + value[2];\n})\n// result\n\"\"安徽省蚌埠市固镇县\"\"\n```\n\n3. 第三个参数：space 可选项，用于增加format字符的可读性，可取值 Number, String, 但长度不超过10个字符\n```js\nJSON.stringify({\"name\": \"煦涵\", \"age\": 28, \"male\": true, \"other\": null}, '', 4)\n\n// result \n\"{\n    \"name\": \"煦涵\",\n    \"age\": 28,\n    \"male\": true,\n    \"other\": null\n}\"\n\nJSON.stringify({\"level1\": {\"level2\": {\"level3\": {\"name\": \"煦涵\"} } } }, '', '|---')\n\n// result: 展示属性结构很直观\n\"{\n|---\"level1\": {\n|---|---\"level2\": {\n|---|---|---\"level3\": {\n|---|---|---|---\"name\": \"煦涵\"\n|---|---|---}\n|---|---}\n|---}\n}\"\n```\n4. 特殊情况\n还记得上面的几种情况吧，当对象不是原始对象时，处理方式有所不同，比如正则表达式时，会返回空对象，日期对象时返回日期字符串;参看文档是，JSON.stringify发现参数对象有toJSON方法，就直接使用这个方法的返回值作为参数，而忽略原对象的其他参数。\n\n```js\nJSON.stringify({\n    \"name\": \"煦涵\",\n    \"age\": 28,\n    \"toJSON\": function() {\n        return this.name + '年龄是' + this.age + '岁'\n    }\n})\n// result:\n\"\"煦涵年龄是28岁\"\"\n\n/* 日期对象Date原型上包含toJSON 方法，`Date.prototype.toJSON ( key )` */\nvar date = new Date();\ndate.toJSON();\nJSON.stringify(date);\n\n/* RegExp 对象 JSON.stringify 默认会把正则转换成空对象，我们可以使用toJSON, 把正则表达式转换成字符串 */\nRegExp.prototype.toJSON = RegExp.prototype.toString;\nJSON.stringify(/abc/g)\n// result\n\"\"/abc/g\"\"\n```\n\n\n### JSON.parse ( text [ , reviver ] )\nJSON.parse为 JSON.stringify的逆运算，转换时 text 必须符合JSON的语法格式， 不然会报错，reviver 参数 和 JSON.stringify 的参数 replacer类似， 但是遍历顺序和replacer相反。\n```js\nJSON.parse('{\"name\":\"煦涵\",\"age\":28,\"male\":true,\"brother\":[\"B1\",\"B2\",\"B3\"],\"parent\":{\"father\":{\"name\":\"name\"},\"mother\":{\"name\":\"name\"}},\"other\":null}' )\n\n/* result:\n{\n    \"name\": \"煦涵\",\n    \"age\" : 28,\n    \"male\" : true,\n    \"brother\": [\"B1\", \"B2\", \"B3\"],\n    \"parent\": {\n        \"father\" : {\n            \"name\": \"name\"\n        },\n        \"mother\": {\n            \"name\": \"name\"\n        }\n    },\n    \"other\": null\n}\n*/\n\nJSON.parse('{\"level1\": {\"level2\": {\"name\": \"煦涵\"} } }', function(key, value) {\n    // level2 Object {name: \"煦涵\"}\n    // level1 Object {level2: Object}\n    // Object {level1: Object}\n    console.log(key, value);\n    return value;\n})\n\n// result\n{\"level1\":{\"level2\":{\"name\":\"煦涵\"}}}\n```\n\n## 参考文档：\n[http://www.ecma-international.org/ecma-262/5.1/#sec-15.12](http://www.ecma-international.org/ecma-262/5.1/#sec-15.12)\n[https://github.com/douglascrockford/JSON-js/blob/master/json2.js](https://github.com/douglascrockford/JSON-js/blob/master/json2.js)\n[http://www.json.org/](http://www.json.org/)\n\n感谢您的阅读","slug":"煦涵说JSON","published":1,"updated":"2017-09-29T15:27:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj86mtvrn000460wqzjhmoiod","content":"<p>JSON(Javascript Object Notaion, javascript 对象表示法)， 是一种数据交换格式，能够在服务器端交换数据， 2001年由Douglas Crockford提出，目的是取代繁琐笨重的XML格式。</p>\n<p>JSON 数据格式的优点：</p>\n<ul>\n<li>与语言无关的文本数据格式</li>\n<li>轻量、简单、易维护</li>\n<li>是javascript编程语言的一个子集(<strong>Standard ECMA-262 3rd Edition - December 1999</strong>)， 符合javascript 语言语法，可以使用javascript提供的方法直接解析处理</li>\n</ul>\n<p>JSON 建立在两种数据结构上：</p>\n<ul>\n<li>键 / 值对：各种语言中可以为 字符串、对象、数组或者哈希表</li>\n<li>有序列表（值）：各种语言中实现为数组、向量、列表或者序列</li>\n</ul>\n<h2 id=\"JSON的基本语法：\"><a href=\"#JSON的基本语法：\" class=\"headerlink\" title=\"JSON的基本语法：\"></a>JSON的基本语法：</h2><ul>\n<li><p>JSON 对象</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"key\"</span>: value</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>JSON 数组</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[value, value, value]</div></pre></td></tr></table></figure>\n</li>\n<li><p>value 可取值<br>value 可以是 String(必须使用双引号包裹)、Number、Boolean、null、Object、Array, 这些形式可以嵌套，value值不能是八进制、十六进制（0xF0F）、undefined、function、日期对象，看下面示例：</p>\n</li>\n</ul>\n<p>合格的 JSON 格式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>, </div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"literal\">null</span>, </div><div class=\"line\">    <span class=\"string\">\"male\"</span>: <span class=\"literal\">true</span>, </div><div class=\"line\">    <span class=\"string\">\"age\"</span>: <span class=\"number\">23</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"string\">\"brother\"</span>: [<span class=\"string\">\"煦涵1\"</span>, <span class=\"string\">\"煦涵2\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"string\">\"brother\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"煦涵1\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"age\"</span>: <span class=\"number\">32</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"煦涵2\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"age\"</span>: <span class=\"number\">30</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">[&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵”</span></div><div class=\"line\"><span class=\"string\">    \"</span>age<span class=\"string\">\": 30</span></div><div class=\"line\"><span class=\"string\">&#125;,&#123;</span></div><div class=\"line\"><span class=\"string\">    \"</span>name<span class=\"string\">\": \"</span>张三”</div><div class=\"line\">    <span class=\"string\">\"age\"</span>: <span class=\"number\">27</span></div><div class=\"line\">&#125;]</div></pre></td></tr></table></figure></p>\n<p>不合格的 JSON 格式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// key 必须用双引号包裹，value 如果是字符串必须用双引号包裹</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">'name'</span>: <span class=\"string\">\"煦涵\"</span> &#125; </div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, oxFOF] </div><div class=\"line\">&#123; <span class=\"string\">'name'</span>: <span class=\"literal\">undefined</span> &#125; </div><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"string\">'name'</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"煦涵\"</span></div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div><div class=\"line\">&#123; <span class=\"string\">'name'</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;</div></pre></td></tr></table></figure></p>\n<p>如果value的一个String（双引号包围）内包含 <code>\\&quot;</code>、<code>\\\\</code>、<code>\\/</code>、<code>\\b</code>、<code>\\f</code>、<code>\\n</code>、<code>\\r</code>、<code>\\t</code>、<code>\\u001f</code> 需要使用反斜杠<br>如果value的一个Number，不能使用八进制和十六进制数值<br>PS： value对空格没有限制要求</p>\n<h2 id=\"JSON-对象\"><a href=\"#JSON-对象\" class=\"headerlink\" title=\"JSON 对象\"></a>JSON 对象</h2><p>聊完 JSON 下面我们来聊聊 JSON 对象，javascript 在 ES5中新增了 JSON 对象，用来处理 JSON 文本数据，实现字符串与 JSON 对象间的相互转换，<code>JSON.stringify ( value [ , replacer [ , space ] ] )</code> 和 <code>JSON.parse ( text [ , reviver ] )</code>， 前者是把 JSON 对象转换为 JSON 字符串，后者的把 JSON 字符串解析为 JSON 对象，下面来详细看看这个两个方法。</p>\n<h3 id=\"JSON-stringify-value-replacer-space\"><a href=\"#JSON-stringify-value-replacer-space\" class=\"headerlink\" title=\"JSON.stringify ( value [ , replacer [ , space ] ] )\"></a>JSON.stringify ( value [ , replacer [ , space ] ] )</h3><ol>\n<li>第一个参数： Value 必须项，可以是 Object, Array, String, Boolean, Number, Null.看几个例子：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>,</div><div class=\"line\">    <span class=\"string\">\"age\"</span> : <span class=\"number\">28</span>,</div><div class=\"line\">    <span class=\"string\">\"male\"</span> : <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">\"brother\"</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</div><div class=\"line\">    <span class=\"string\">\"parent\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"father\"</span> : &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"name\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"mother\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"name\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"other\"</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>煦涵<span class=\"string\">\",\"</span>age<span class=\"string\">\":28,\"</span>male<span class=\"string\">\":true,\"</span>brother<span class=\"string\">\":[\"</span>B1<span class=\"string\">\",\"</span>B2<span class=\"string\">\",\"</span>B3<span class=\"string\">\"],\"</span>parent<span class=\"string\">\":&#123;\"</span>father<span class=\"string\">\":&#123;\"</span>name<span class=\"string\">\":\"</span>name<span class=\"string\">\"&#125;,\"</span>mother<span class=\"string\">\":&#123;\"</span>name<span class=\"string\">\":\"</span>name<span class=\"string\">\"&#125;&#125;,\"</span>other<span class=\"string\">\":null&#125;\"</span></div></pre></td></tr></table></figure>\n<p>当待转换值不是 JSON 的基本类型时：</p>\n<ul>\n<li>原始对象 item 值是 undefined、函数或 XML 对象，值会被过滤；</li>\n<li>数组 item 是 undefined、函数或 XML 对象，值会被转成 null；</li>\n<li>正则对象会被转换成空对象；</li>\n<li>对象的不可遍历属性会被忽略；</li>\n<li>八进制和十六进制会被转换成十进制;</li>\n<li>特殊字符需要转义成反斜杠</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"literal\">undefined</span>,</div><div class=\"line\">    <span class=\"string\">\"age\"</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">28</span>&#125;,</div><div class=\"line\">    <span class=\"string\">\"male\"</span> : <span class=\"regexp\">/male/g</span>,</div><div class=\"line\">    <span class=\"string\">\"brother\"</span>: [<span class=\"literal\">undefined</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> abc&#125;, <span class=\"string\">\"B3\"</span>, <span class=\"number\">0xF</span>OF],</div><div class=\"line\">    <span class=\"string\">\"parent\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"father\"</span> : &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"literal\">undefined</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"mother\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"name\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"other\"</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result: 正则被转出了空对象，undefined, function 被忽略或者转成 null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>male<span class=\"string\">\":&#123;&#125;,\"</span>brother<span class=\"string\">\":[null,null,\"</span>B3<span class=\"string\">\", 3855],\"</span>parent<span class=\"string\">\":&#123;\"</span>father<span class=\"string\">\":&#123;&#125;,\"</span>mother<span class=\"string\">\":&#123;\"</span>name<span class=\"string\">\":\"</span>name<span class=\"string\">\"&#125;&#125;,\"</span>other<span class=\"string\">\":null&#125;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 不可遍历属性 */</span></div><div class=\"line\"><span class=\"keyword\">var</span> demo = &#123;&#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(demo, &#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: &#123;</div><div class=\"line\">        value: <span class=\"string\">\"煦涵\"</span>,</div><div class=\"line\">        enumerable: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"age\"</span>: &#123;</div><div class=\"line\">        value: <span class=\"number\">28</span>,</div><div class=\"line\">        enumerable: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(demo);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// enumerable: 当且仅当该属性的 enumerable 为 true 时，该属性才能够出现在对象的枚举属性中,</span></div><div class=\"line\"><span class=\"comment\">// result: name 属性会被过滤</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>age<span class=\"string\">\":28&#125;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 特殊字符处理-01 */</span></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"special01\"</span>: <span class=\"string\">\"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\"</span>,</div><div class=\"line\">    <span class=\"string\">\"special02\"</span>: <span class=\"string\">\"双引号 \\\"，单引号 ', 斜杠 \\/, 反斜杠 \\\\\"</span>,</div><div class=\"line\">    <span class=\"string\">\"special03\"</span>: <span class=\"string\">\"unicdoe字符 \\u001f\"</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>special01<span class=\"string\">\":\"</span>回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t<span class=\"string\">\",\"</span>special02<span class=\"string\">\":\"</span>双引号 \\<span class=\"string\">\"，单引号 ', 斜杠 /, 反斜杠 \\\\\"</span>,<span class=\"string\">\"special03\"</span>:<span class=\"string\">\"unicdoe字符 \\u001f\"</span>&#125;<span class=\"string\">\"</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">/* 特殊字符处理-02 */</span></div><div class=\"line\"><span class=\"string\">var demo = &#123;&#125;</span></div><div class=\"line\"><span class=\"string\">demo.special01 = '回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t';</span></div><div class=\"line\"><span class=\"string\">demo.special02 = '双引号 \"</span>，斜杠 /, 反斜杠\\，end <span class=\"string\">';</span></div><div class=\"line\"><span class=\"string\">demo.special03 = '</span>unicdoe字符 \\u001f<span class=\"string\">';</span></div><div class=\"line\"><span class=\"string\">JSON.stringify(demo);</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">// result, 双引号被转义了，反斜杠被忽略了</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"special01\":\"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\",\"special02\":\"双引号 \\\"，斜杠 /, 反斜杠，end \",\"special03\":\"unicdoe字符 \\u001f\"&#125;\"</span></div></pre></td></tr></table></figure>\n<ol>\n<li>第二个参数：replacer可选项，可以是 array or function</li>\n</ol>\n<ul>\n<li>当replacer 是数组时，对第一个参数 value进行过滤，key 不在数组里的不会输出，这里需要注意的是，当第一个参数为Object时才有效，如果为Array，无效，看下面例子：</li>\n<li>当replacer 是函数时，递归遍历所有的键，可以对对象进行format and replace 等操作</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* replacer 为数组 */</span></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"0\"</span>: <span class=\"string\">\"安徽省\"</span>,</div><div class=\"line\">    <span class=\"string\">\"1\"</span>: <span class=\"string\">\"蚌埠市\"</span>,</div><div class=\"line\">    <span class=\"string\">\"2\"</span>: <span class=\"string\">\"固镇县\"</span></div><div class=\"line\">&#125;, [<span class=\"number\">0</span>,<span class=\"number\">1</span>])</div><div class=\"line\"><span class=\"comment\">// result:</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span><span class=\"number\">0</span><span class=\"string\">\":\"</span>安徽省<span class=\"string\">\",\"</span><span class=\"number\">1</span><span class=\"string\">\":\"</span>蚌埠市<span class=\"string\">\"&#125;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify([</div><div class=\"line\">    <span class=\"string\">\"安徽省\"</span>,</div><div class=\"line\">    <span class=\"string\">\"蚌埠市\"</span>,</div><div class=\"line\">    <span class=\"string\">\"固镇县\"</span></div><div class=\"line\">], [<span class=\"number\">0</span>,<span class=\"number\">1</span>])</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"[\"</span>安徽省<span class=\"string\">\",\"</span>蚌埠市<span class=\"string\">\",\"</span>固镇县<span class=\"string\">\"]\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* replacer 为函数 */</span></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"0\"</span>: <span class=\"string\">\"安徽省\"</span>,</div><div class=\"line\">    <span class=\"string\">\"1\"</span>: <span class=\"string\">\"蚌埠市\"</span>,</div><div class=\"line\">    <span class=\"string\">\"2\"</span>: <span class=\"string\">\"固镇县\"</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// key: '', value: &#123;0: \"安徽省\", 1: \"蚌埠市\", 2: \"固镇县\"&#125;</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(key, value);</div><div class=\"line\">    <span class=\"keyword\">return</span> value[<span class=\"number\">0</span>] + value[<span class=\"number\">1</span>] + value[<span class=\"number\">2</span>];</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"\"</span>安徽省蚌埠市固镇县<span class=\"string\">\"\"</span></div></pre></td></tr></table></figure>\n<ol>\n<li><p>第三个参数：space 可选项，用于增加format字符的可读性，可取值 Number, String, 但长度不超过10个字符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>, <span class=\"string\">\"age\"</span>: <span class=\"number\">28</span>, <span class=\"string\">\"male\"</span>: <span class=\"literal\">true</span>, <span class=\"string\">\"other\"</span>: <span class=\"literal\">null</span>&#125;, <span class=\"string\">''</span>, <span class=\"number\">4</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result </span></div><div class=\"line\"><span class=\"string\">\"&#123;</span></div><div class=\"line\"><span class=\"string\">    \"</span>name<span class=\"string\">\": \"</span>煦涵<span class=\"string\">\",</span></div><div class=\"line\"><span class=\"string\">    \"</span>age<span class=\"string\">\": 28,</span></div><div class=\"line\"><span class=\"string\">    \"</span>male<span class=\"string\">\": true,</span></div><div class=\"line\"><span class=\"string\">    \"</span>other<span class=\"string\">\": null</span></div><div class=\"line\"><span class=\"string\">&#125;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;<span class=\"string\">\"level1\"</span>: &#123;<span class=\"string\">\"level2\"</span>: &#123;<span class=\"string\">\"level3\"</span>: &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>&#125; &#125; &#125; &#125;, <span class=\"string\">''</span>, <span class=\"string\">'|---'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result: 展示属性结构很直观</span></div><div class=\"line\"><span class=\"string\">\"&#123;</span></div><div class=\"line\"><span class=\"string\">|---\"</span>level1<span class=\"string\">\": &#123;</span></div><div class=\"line\"><span class=\"string\">|---|---\"</span>level2<span class=\"string\">\": &#123;</span></div><div class=\"line\"><span class=\"string\">|---|---|---\"</span>level3<span class=\"string\">\": &#123;</span></div><div class=\"line\"><span class=\"string\">|---|---|---|---\"</span>name<span class=\"string\">\": \"</span>煦涵<span class=\"string\">\"</span></div><div class=\"line\"><span class=\"string\">|---|---|---&#125;</span></div><div class=\"line\"><span class=\"string\">|---|---&#125;</span></div><div class=\"line\"><span class=\"string\">|---&#125;</span></div><div class=\"line\"><span class=\"string\">&#125;\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>特殊情况<br>还记得上面的几种情况吧，当对象不是原始对象时，处理方式有所不同，比如正则表达式时，会返回空对象，日期对象时返回日期字符串;参看文档是，JSON.stringify发现参数对象有toJSON方法，就直接使用这个方法的返回值作为参数，而忽略原对象的其他参数。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>,</div><div class=\"line\">    <span class=\"string\">\"age\"</span>: <span class=\"number\">28</span>,</div><div class=\"line\">    <span class=\"string\">\"toJSON\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">'年龄是'</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">'岁'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// result:</span></div><div class=\"line\"><span class=\"string\">\"\"</span>煦涵年龄是<span class=\"number\">28</span>岁<span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 日期对象Date原型上包含toJSON 方法，`Date.prototype.toJSON ( key )` */</span></div><div class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">date.toJSON();</div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(date);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* RegExp 对象 JSON.stringify 默认会把正则转换成空对象，我们可以使用toJSON, 把正则表达式转换成字符串 */</span></div><div class=\"line\"><span class=\"built_in\">RegExp</span>.prototype.toJSON = <span class=\"built_in\">RegExp</span>.prototype.toString;</div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(<span class=\"regexp\">/abc/g</span>)</div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"\"</span>/abc/g<span class=\"string\">\"\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"JSON-parse-text-reviver\"><a href=\"#JSON-parse-text-reviver\" class=\"headerlink\" title=\"JSON.parse ( text [ , reviver ] )\"></a>JSON.parse ( text [ , reviver ] )</h3><p>JSON.parse为 JSON.stringify的逆运算，转换时 text 必须符合JSON的语法格式， 不然会报错，reviver 参数 和 JSON.stringify 的参数 replacer类似， 但是遍历顺序和replacer相反。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.parse(<span class=\"string\">'&#123;\"name\":\"煦涵\",\"age\":28,\"male\":true,\"brother\":[\"B1\",\"B2\",\"B3\"],\"parent\":&#123;\"father\":&#123;\"name\":\"name\"&#125;,\"mother\":&#123;\"name\":\"name\"&#125;&#125;,\"other\":null&#125;'</span> )</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* result:</span></div><div class=\"line\"><span class=\"comment\">&#123;</span></div><div class=\"line\"><span class=\"comment\">    \"name\": \"煦涵\",</span></div><div class=\"line\"><span class=\"comment\">    \"age\" : 28,</span></div><div class=\"line\"><span class=\"comment\">    \"male\" : true,</span></div><div class=\"line\"><span class=\"comment\">    \"brother\": [\"B1\", \"B2\", \"B3\"],</span></div><div class=\"line\"><span class=\"comment\">    \"parent\": &#123;</span></div><div class=\"line\"><span class=\"comment\">        \"father\" : &#123;</span></div><div class=\"line\"><span class=\"comment\">            \"name\": \"name\"</span></div><div class=\"line\"><span class=\"comment\">        &#125;,</span></div><div class=\"line\"><span class=\"comment\">        \"mother\": &#123;</span></div><div class=\"line\"><span class=\"comment\">            \"name\": \"name\"</span></div><div class=\"line\"><span class=\"comment\">        &#125;</span></div><div class=\"line\"><span class=\"comment\">    &#125;,</span></div><div class=\"line\"><span class=\"comment\">    \"other\": null</span></div><div class=\"line\"><span class=\"comment\">&#125;</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">JSON</span>.parse(<span class=\"string\">'&#123;\"level1\": &#123;\"level2\": &#123;\"name\": \"煦涵\"&#125; &#125; &#125;'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// level2 Object &#123;name: \"煦涵\"&#125;</span></div><div class=\"line\">    <span class=\"comment\">// level1 Object &#123;level2: Object&#125;</span></div><div class=\"line\">    <span class=\"comment\">// Object &#123;level1: Object&#125;</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(key, value);</div><div class=\"line\">    <span class=\"keyword\">return</span> value;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\">&#123;<span class=\"string\">\"level1\"</span>:&#123;<span class=\"string\">\"level2\"</span>:&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"煦涵\"</span>&#125;&#125;&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"参考文档：\"><a href=\"#参考文档：\" class=\"headerlink\" title=\"参考文档：\"></a>参考文档：</h2><p><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.12\" target=\"_blank\" rel=\"external\">http://www.ecma-international.org/ecma-262/5.1/#sec-15.12</a><br><a href=\"https://github.com/douglascrockford/JSON-js/blob/master/json2.js\" target=\"_blank\" rel=\"external\">https://github.com/douglascrockford/JSON-js/blob/master/json2.js</a><br><a href=\"http://www.json.org/\" target=\"_blank\" rel=\"external\">http://www.json.org/</a></p>\n<p>感谢您的阅读</p>\n","site":{"data":{}},"excerpt":"","more":"<p>JSON(Javascript Object Notaion, javascript 对象表示法)， 是一种数据交换格式，能够在服务器端交换数据， 2001年由Douglas Crockford提出，目的是取代繁琐笨重的XML格式。</p>\n<p>JSON 数据格式的优点：</p>\n<ul>\n<li>与语言无关的文本数据格式</li>\n<li>轻量、简单、易维护</li>\n<li>是javascript编程语言的一个子集(<strong>Standard ECMA-262 3rd Edition - December 1999</strong>)， 符合javascript 语言语法，可以使用javascript提供的方法直接解析处理</li>\n</ul>\n<p>JSON 建立在两种数据结构上：</p>\n<ul>\n<li>键 / 值对：各种语言中可以为 字符串、对象、数组或者哈希表</li>\n<li>有序列表（值）：各种语言中实现为数组、向量、列表或者序列</li>\n</ul>\n<h2 id=\"JSON的基本语法：\"><a href=\"#JSON的基本语法：\" class=\"headerlink\" title=\"JSON的基本语法：\"></a>JSON的基本语法：</h2><ul>\n<li><p>JSON 对象</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"key\"</span>: value</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>JSON 数组</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[value, value, value]</div></pre></td></tr></table></figure>\n</li>\n<li><p>value 可取值<br>value 可以是 String(必须使用双引号包裹)、Number、Boolean、null、Object、Array, 这些形式可以嵌套，value值不能是八进制、十六进制（0xF0F）、undefined、function、日期对象，看下面示例：</p>\n</li>\n</ul>\n<p>合格的 JSON 格式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>, </div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"literal\">null</span>, </div><div class=\"line\">    <span class=\"string\">\"male\"</span>: <span class=\"literal\">true</span>, </div><div class=\"line\">    <span class=\"string\">\"age\"</span>: <span class=\"number\">23</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"string\">\"brother\"</span>: [<span class=\"string\">\"煦涵1\"</span>, <span class=\"string\">\"煦涵2\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"string\">\"brother\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"煦涵1\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"age\"</span>: <span class=\"number\">32</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"煦涵2\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"age\"</span>: <span class=\"number\">30</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">[&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵”</span></div><div class=\"line\"><span class=\"string\">    \"</span>age<span class=\"string\">\": 30</span></div><div class=\"line\"><span class=\"string\">&#125;,&#123;</span></div><div class=\"line\"><span class=\"string\">    \"</span>name<span class=\"string\">\": \"</span>张三”</div><div class=\"line\">    <span class=\"string\">\"age\"</span>: <span class=\"number\">27</span></div><div class=\"line\">&#125;]</div></pre></td></tr></table></figure></p>\n<p>不合格的 JSON 格式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// key 必须用双引号包裹，value 如果是字符串必须用双引号包裹</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"string\">'name'</span>: <span class=\"string\">\"煦涵\"</span> &#125; </div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, oxFOF] </div><div class=\"line\">&#123; <span class=\"string\">'name'</span>: <span class=\"literal\">undefined</span> &#125; </div><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"string\">'name'</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"煦涵\"</span></div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div><div class=\"line\">&#123; <span class=\"string\">'name'</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;</div></pre></td></tr></table></figure></p>\n<p>如果value的一个String（双引号包围）内包含 <code>\\&quot;</code>、<code>\\\\</code>、<code>\\/</code>、<code>\\b</code>、<code>\\f</code>、<code>\\n</code>、<code>\\r</code>、<code>\\t</code>、<code>\\u001f</code> 需要使用反斜杠<br>如果value的一个Number，不能使用八进制和十六进制数值<br>PS： value对空格没有限制要求</p>\n<h2 id=\"JSON-对象\"><a href=\"#JSON-对象\" class=\"headerlink\" title=\"JSON 对象\"></a>JSON 对象</h2><p>聊完 JSON 下面我们来聊聊 JSON 对象，javascript 在 ES5中新增了 JSON 对象，用来处理 JSON 文本数据，实现字符串与 JSON 对象间的相互转换，<code>JSON.stringify ( value [ , replacer [ , space ] ] )</code> 和 <code>JSON.parse ( text [ , reviver ] )</code>， 前者是把 JSON 对象转换为 JSON 字符串，后者的把 JSON 字符串解析为 JSON 对象，下面来详细看看这个两个方法。</p>\n<h3 id=\"JSON-stringify-value-replacer-space\"><a href=\"#JSON-stringify-value-replacer-space\" class=\"headerlink\" title=\"JSON.stringify ( value [ , replacer [ , space ] ] )\"></a>JSON.stringify ( value [ , replacer [ , space ] ] )</h3><ol>\n<li>第一个参数： Value 必须项，可以是 Object, Array, String, Boolean, Number, Null.看几个例子：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>,</div><div class=\"line\">    <span class=\"string\">\"age\"</span> : <span class=\"number\">28</span>,</div><div class=\"line\">    <span class=\"string\">\"male\"</span> : <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">\"brother\"</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</div><div class=\"line\">    <span class=\"string\">\"parent\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"father\"</span> : &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"name\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"mother\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"name\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"other\"</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>煦涵<span class=\"string\">\",\"</span>age<span class=\"string\">\":28,\"</span>male<span class=\"string\">\":true,\"</span>brother<span class=\"string\">\":[\"</span>B1<span class=\"string\">\",\"</span>B2<span class=\"string\">\",\"</span>B3<span class=\"string\">\"],\"</span>parent<span class=\"string\">\":&#123;\"</span>father<span class=\"string\">\":&#123;\"</span>name<span class=\"string\">\":\"</span>name<span class=\"string\">\"&#125;,\"</span>mother<span class=\"string\">\":&#123;\"</span>name<span class=\"string\">\":\"</span>name<span class=\"string\">\"&#125;&#125;,\"</span>other<span class=\"string\">\":null&#125;\"</span></div></pre></td></tr></table></figure>\n<p>当待转换值不是 JSON 的基本类型时：</p>\n<ul>\n<li>原始对象 item 值是 undefined、函数或 XML 对象，值会被过滤；</li>\n<li>数组 item 是 undefined、函数或 XML 对象，值会被转成 null；</li>\n<li>正则对象会被转换成空对象；</li>\n<li>对象的不可遍历属性会被忽略；</li>\n<li>八进制和十六进制会被转换成十进制;</li>\n<li>特殊字符需要转义成反斜杠</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"literal\">undefined</span>,</div><div class=\"line\">    <span class=\"string\">\"age\"</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">28</span>&#125;,</div><div class=\"line\">    <span class=\"string\">\"male\"</span> : <span class=\"regexp\">/male/g</span>,</div><div class=\"line\">    <span class=\"string\">\"brother\"</span>: [<span class=\"literal\">undefined</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> abc&#125;, <span class=\"string\">\"B3\"</span>, <span class=\"number\">0xF</span>OF],</div><div class=\"line\">    <span class=\"string\">\"parent\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"father\"</span> : &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"literal\">undefined</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"mother\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"name\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"other\"</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result: 正则被转出了空对象，undefined, function 被忽略或者转成 null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>male<span class=\"string\">\":&#123;&#125;,\"</span>brother<span class=\"string\">\":[null,null,\"</span>B3<span class=\"string\">\", 3855],\"</span>parent<span class=\"string\">\":&#123;\"</span>father<span class=\"string\">\":&#123;&#125;,\"</span>mother<span class=\"string\">\":&#123;\"</span>name<span class=\"string\">\":\"</span>name<span class=\"string\">\"&#125;&#125;,\"</span>other<span class=\"string\">\":null&#125;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 不可遍历属性 */</span></div><div class=\"line\"><span class=\"keyword\">var</span> demo = &#123;&#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(demo, &#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: &#123;</div><div class=\"line\">        value: <span class=\"string\">\"煦涵\"</span>,</div><div class=\"line\">        enumerable: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"age\"</span>: &#123;</div><div class=\"line\">        value: <span class=\"number\">28</span>,</div><div class=\"line\">        enumerable: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(demo);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// enumerable: 当且仅当该属性的 enumerable 为 true 时，该属性才能够出现在对象的枚举属性中,</span></div><div class=\"line\"><span class=\"comment\">// result: name 属性会被过滤</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>age<span class=\"string\">\":28&#125;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 特殊字符处理-01 */</span></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"special01\"</span>: <span class=\"string\">\"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\"</span>,</div><div class=\"line\">    <span class=\"string\">\"special02\"</span>: <span class=\"string\">\"双引号 \\\"，单引号 ', 斜杠 \\/, 反斜杠 \\\\\"</span>,</div><div class=\"line\">    <span class=\"string\">\"special03\"</span>: <span class=\"string\">\"unicdoe字符 \\u001f\"</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>special01<span class=\"string\">\":\"</span>回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t<span class=\"string\">\",\"</span>special02<span class=\"string\">\":\"</span>双引号 \\<span class=\"string\">\"，单引号 ', 斜杠 /, 反斜杠 \\\\\"</span>,<span class=\"string\">\"special03\"</span>:<span class=\"string\">\"unicdoe字符 \\u001f\"</span>&#125;<span class=\"string\">\"</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">/* 特殊字符处理-02 */</span></div><div class=\"line\"><span class=\"string\">var demo = &#123;&#125;</span></div><div class=\"line\"><span class=\"string\">demo.special01 = '回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t';</span></div><div class=\"line\"><span class=\"string\">demo.special02 = '双引号 \"</span>，斜杠 /, 反斜杠\\，end <span class=\"string\">';</span></div><div class=\"line\"><span class=\"string\">demo.special03 = '</span>unicdoe字符 \\u001f<span class=\"string\">';</span></div><div class=\"line\"><span class=\"string\">JSON.stringify(demo);</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">// result, 双引号被转义了，反斜杠被忽略了</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"special01\":\"回车 \\r，换行 \\n，退格 \\b，换页 \\f，Tab \\t\",\"special02\":\"双引号 \\\"，斜杠 /, 反斜杠，end \",\"special03\":\"unicdoe字符 \\u001f\"&#125;\"</span></div></pre></td></tr></table></figure>\n<ol>\n<li>第二个参数：replacer可选项，可以是 array or function</li>\n</ol>\n<ul>\n<li>当replacer 是数组时，对第一个参数 value进行过滤，key 不在数组里的不会输出，这里需要注意的是，当第一个参数为Object时才有效，如果为Array，无效，看下面例子：</li>\n<li>当replacer 是函数时，递归遍历所有的键，可以对对象进行format and replace 等操作</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* replacer 为数组 */</span></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"0\"</span>: <span class=\"string\">\"安徽省\"</span>,</div><div class=\"line\">    <span class=\"string\">\"1\"</span>: <span class=\"string\">\"蚌埠市\"</span>,</div><div class=\"line\">    <span class=\"string\">\"2\"</span>: <span class=\"string\">\"固镇县\"</span></div><div class=\"line\">&#125;, [<span class=\"number\">0</span>,<span class=\"number\">1</span>])</div><div class=\"line\"><span class=\"comment\">// result:</span></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span><span class=\"number\">0</span><span class=\"string\">\":\"</span>安徽省<span class=\"string\">\",\"</span><span class=\"number\">1</span><span class=\"string\">\":\"</span>蚌埠市<span class=\"string\">\"&#125;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify([</div><div class=\"line\">    <span class=\"string\">\"安徽省\"</span>,</div><div class=\"line\">    <span class=\"string\">\"蚌埠市\"</span>,</div><div class=\"line\">    <span class=\"string\">\"固镇县\"</span></div><div class=\"line\">], [<span class=\"number\">0</span>,<span class=\"number\">1</span>])</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"[\"</span>安徽省<span class=\"string\">\",\"</span>蚌埠市<span class=\"string\">\",\"</span>固镇县<span class=\"string\">\"]\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* replacer 为函数 */</span></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"0\"</span>: <span class=\"string\">\"安徽省\"</span>,</div><div class=\"line\">    <span class=\"string\">\"1\"</span>: <span class=\"string\">\"蚌埠市\"</span>,</div><div class=\"line\">    <span class=\"string\">\"2\"</span>: <span class=\"string\">\"固镇县\"</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// key: '', value: &#123;0: \"安徽省\", 1: \"蚌埠市\", 2: \"固镇县\"&#125;</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(key, value);</div><div class=\"line\">    <span class=\"keyword\">return</span> value[<span class=\"number\">0</span>] + value[<span class=\"number\">1</span>] + value[<span class=\"number\">2</span>];</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"\"</span>安徽省蚌埠市固镇县<span class=\"string\">\"\"</span></div></pre></td></tr></table></figure>\n<ol>\n<li><p>第三个参数：space 可选项，用于增加format字符的可读性，可取值 Number, String, 但长度不超过10个字符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>, <span class=\"string\">\"age\"</span>: <span class=\"number\">28</span>, <span class=\"string\">\"male\"</span>: <span class=\"literal\">true</span>, <span class=\"string\">\"other\"</span>: <span class=\"literal\">null</span>&#125;, <span class=\"string\">''</span>, <span class=\"number\">4</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result </span></div><div class=\"line\"><span class=\"string\">\"&#123;</span></div><div class=\"line\"><span class=\"string\">    \"</span>name<span class=\"string\">\": \"</span>煦涵<span class=\"string\">\",</span></div><div class=\"line\"><span class=\"string\">    \"</span>age<span class=\"string\">\": 28,</span></div><div class=\"line\"><span class=\"string\">    \"</span>male<span class=\"string\">\": true,</span></div><div class=\"line\"><span class=\"string\">    \"</span>other<span class=\"string\">\": null</span></div><div class=\"line\"><span class=\"string\">&#125;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;<span class=\"string\">\"level1\"</span>: &#123;<span class=\"string\">\"level2\"</span>: &#123;<span class=\"string\">\"level3\"</span>: &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>&#125; &#125; &#125; &#125;, <span class=\"string\">''</span>, <span class=\"string\">'|---'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result: 展示属性结构很直观</span></div><div class=\"line\"><span class=\"string\">\"&#123;</span></div><div class=\"line\"><span class=\"string\">|---\"</span>level1<span class=\"string\">\": &#123;</span></div><div class=\"line\"><span class=\"string\">|---|---\"</span>level2<span class=\"string\">\": &#123;</span></div><div class=\"line\"><span class=\"string\">|---|---|---\"</span>level3<span class=\"string\">\": &#123;</span></div><div class=\"line\"><span class=\"string\">|---|---|---|---\"</span>name<span class=\"string\">\": \"</span>煦涵<span class=\"string\">\"</span></div><div class=\"line\"><span class=\"string\">|---|---|---&#125;</span></div><div class=\"line\"><span class=\"string\">|---|---&#125;</span></div><div class=\"line\"><span class=\"string\">|---&#125;</span></div><div class=\"line\"><span class=\"string\">&#125;\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>特殊情况<br>还记得上面的几种情况吧，当对象不是原始对象时，处理方式有所不同，比如正则表达式时，会返回空对象，日期对象时返回日期字符串;参看文档是，JSON.stringify发现参数对象有toJSON方法，就直接使用这个方法的返回值作为参数，而忽略原对象的其他参数。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"煦涵\"</span>,</div><div class=\"line\">    <span class=\"string\">\"age\"</span>: <span class=\"number\">28</span>,</div><div class=\"line\">    <span class=\"string\">\"toJSON\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">'年龄是'</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">'岁'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// result:</span></div><div class=\"line\"><span class=\"string\">\"\"</span>煦涵年龄是<span class=\"number\">28</span>岁<span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 日期对象Date原型上包含toJSON 方法，`Date.prototype.toJSON ( key )` */</span></div><div class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">date.toJSON();</div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(date);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* RegExp 对象 JSON.stringify 默认会把正则转换成空对象，我们可以使用toJSON, 把正则表达式转换成字符串 */</span></div><div class=\"line\"><span class=\"built_in\">RegExp</span>.prototype.toJSON = <span class=\"built_in\">RegExp</span>.prototype.toString;</div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(<span class=\"regexp\">/abc/g</span>)</div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\"><span class=\"string\">\"\"</span>/abc/g<span class=\"string\">\"\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"JSON-parse-text-reviver\"><a href=\"#JSON-parse-text-reviver\" class=\"headerlink\" title=\"JSON.parse ( text [ , reviver ] )\"></a>JSON.parse ( text [ , reviver ] )</h3><p>JSON.parse为 JSON.stringify的逆运算，转换时 text 必须符合JSON的语法格式， 不然会报错，reviver 参数 和 JSON.stringify 的参数 replacer类似， 但是遍历顺序和replacer相反。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.parse(<span class=\"string\">'&#123;\"name\":\"煦涵\",\"age\":28,\"male\":true,\"brother\":[\"B1\",\"B2\",\"B3\"],\"parent\":&#123;\"father\":&#123;\"name\":\"name\"&#125;,\"mother\":&#123;\"name\":\"name\"&#125;&#125;,\"other\":null&#125;'</span> )</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* result:</span></div><div class=\"line\"><span class=\"comment\">&#123;</span></div><div class=\"line\"><span class=\"comment\">    \"name\": \"煦涵\",</span></div><div class=\"line\"><span class=\"comment\">    \"age\" : 28,</span></div><div class=\"line\"><span class=\"comment\">    \"male\" : true,</span></div><div class=\"line\"><span class=\"comment\">    \"brother\": [\"B1\", \"B2\", \"B3\"],</span></div><div class=\"line\"><span class=\"comment\">    \"parent\": &#123;</span></div><div class=\"line\"><span class=\"comment\">        \"father\" : &#123;</span></div><div class=\"line\"><span class=\"comment\">            \"name\": \"name\"</span></div><div class=\"line\"><span class=\"comment\">        &#125;,</span></div><div class=\"line\"><span class=\"comment\">        \"mother\": &#123;</span></div><div class=\"line\"><span class=\"comment\">            \"name\": \"name\"</span></div><div class=\"line\"><span class=\"comment\">        &#125;</span></div><div class=\"line\"><span class=\"comment\">    &#125;,</span></div><div class=\"line\"><span class=\"comment\">    \"other\": null</span></div><div class=\"line\"><span class=\"comment\">&#125;</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">JSON</span>.parse(<span class=\"string\">'&#123;\"level1\": &#123;\"level2\": &#123;\"name\": \"煦涵\"&#125; &#125; &#125;'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// level2 Object &#123;name: \"煦涵\"&#125;</span></div><div class=\"line\">    <span class=\"comment\">// level1 Object &#123;level2: Object&#125;</span></div><div class=\"line\">    <span class=\"comment\">// Object &#123;level1: Object&#125;</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(key, value);</div><div class=\"line\">    <span class=\"keyword\">return</span> value;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\">&#123;<span class=\"string\">\"level1\"</span>:&#123;<span class=\"string\">\"level2\"</span>:&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"煦涵\"</span>&#125;&#125;&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"参考文档：\"><a href=\"#参考文档：\" class=\"headerlink\" title=\"参考文档：\"></a>参考文档：</h2><p><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.12\" target=\"_blank\" rel=\"external\">http://www.ecma-international.org/ecma-262/5.1/#sec-15.12</a><br><a href=\"https://github.com/douglascrockford/JSON-js/blob/master/json2.js\" target=\"_blank\" rel=\"external\">https://github.com/douglascrockford/JSON-js/blob/master/json2.js</a><br><a href=\"http://www.json.org/\" target=\"_blank\" rel=\"external\">http://www.json.org/</a></p>\n<p>感谢您的阅读</p>\n"},{"title":"煦涵说Webpack-IE低版本兼容","author":{"nick":"煦涵","github_name":"zuojj"},"date":"2017-09-03T09:00:00.000Z","thumb":"http://www.zuojj.com/wp-content/uploads/2017/05/webpack1.jpg","_content":"\n[Webpack](https://webpack.js.org/)，Webpack 是一个前端资源加载/打包工具，现在版本已经 release 到 v2.6.1，今天的文章不支持介绍Webpack的API及使用，而是对最近项目开发中使用Webpack打包时处理IE低版本(IE8及以下)浏览器兼容问题做一次总结。\n\n![图片描述][1]\n\nPC端项目前端基础技术选型jQuery + ES6 + EJS + Babel + Webpack：\n* jQuery：提供选择器和ajax接口兼容支持；\n* ES6：跟进前端趋势，方便向后兼容；\n* EJS：提供前端模板引擎支持；\n* Babel：提供 ES6 转码支持；\n* Webpack: 提高前端资源加载/打包；\n\n项目开发过程都在 Chrome 浏览器中，一切都OK，没有任何问题，当在IE9以下浏览器中调试发现好多坑，现总结如下，以后新手参考。\n\n## Case One: `default` 、 `class`、`catch` ES3中保留字问题\n报错信息：\n```\nSCRIPT1048: 缺少标识符\n```\n对应代码：\n```js\ne.n = function (t) {\n    var n = t && t.__esModule ? function () {\n        return t.default\n    } : function () {\n        return t\n    };\n    return e.d(n, \"a\", n), n\n}\n```\n网上查找资料，webpack有一款loader插件[es3ify-loader](https://www.npmjs.com/package/es3ify-loader)来处理ES3的兼容问题，修改webpack配置，问题解决，添加规则如下：\n```js\nmodule: {\n    rules: [{\n            test: /.js$/,\n            enforce: 'post', // post-loader处理\n            loader: 'es3ify-loader'\n        }\n    ]\n}\n```\n这个loader是干啥用的捏，就是把这些保留字给你加上引号，使用字符串的形式引用，请看实例：\n```js\n// 编译前\nfunction(t) { return t.default; }\n\n// 编译后\nfunction(t) { return t[\"default\"]; }\n```\n\n## Case Two: uglify-js产生问题\n重新构建，在IE低版本浏览器预览，使用 `webpack.optimize.UglifyJsPlugin` 压缩时，又报上面同样的错误了，重新采用 beauty:true, build 发现引号被压缩掉了，究其原因，研究了下uglify-js默认配置，发现了 `compress.properties` 属性，增加build options如下，问题解决：\n```js\nnew webpack.optimize.UglifyJsPlugin({\n    compress: {\n        properties: false,\n        warnings: false\n    },\n    output: {\n        beautify: true\n    },\n    sourceMap: false\n})\n```\n\n## Case Three: uglify-js问题\n重新构建，在IE低版本浏览器预览，使用 `webpack.optimize.UglifyJsPlugin` 压缩时，又报上面同样的错误了，报错代码：\n```js\n{\n    catch: function (t) {\n        return this.then(null, t)\n    }\n}\n```\n继续查找uglify-js配置，发现 `output.quote_keys`，修改build options，问题解决：\n```js\nnew webpack.optimize.UglifyJsPlugin({\n    compress: {\n        properties: false,\n        warnings: false\n    },\n    output: {\n        beautify: true,\n        quote_keys: true\n    },\n    sourceMap: false\n}),\n```\n编译后：\n```js\n{\n    \"catch\": function(t) {\n        return this.then(null, t);\n    }\n}\n```\n## Case Four: uglify-js问题\n重新构建，在IE低版本浏览器预览，报错信息如下：\n```html\nSCRIPT3126: 无法设置未定义或 null 引用的属性\n```\n继续分析压缩后代码，发现还是uglify-js问题，其mangle 配置属性 `mangle.screw_ie8` 默认为 true， 什么意思捏，意思就是把支持IE8的代码clear掉，screw you => 去你的，修改压缩配置项，重新编译，问题解决：\n```js\nnew webpack.optimize.UglifyJsPlugin({\n    compress: {\n        properties: false,\n        warnings: false\n    },\n    output: {\n        beautify: true,\n        quote_keys: true\n    },\n    mangle: {\n        screw_ie8: false\n    },\n    sourceMap: false\n})\n```\n## Case Five: ES5的API兼容报错\n在 webpack 的 entry 入口文件top引入 `es5-shim` 问题解决\n```js\nrequire('es5-shim');\nrequire('es5-shim/es5-sham');\n```\n## Case Six: Console.log 问题\n在 webpack 的 entry 入口文件top引入 `console-polyfill` 问题解决\n```js\nrequire('console-polyfill');\n```\n\n## Case Seven: Promise 兼容\n在 webpack 的 entry 入口文件top引入 `es6-promise` 问题解决\n```js\nrequire('es6-promise');\n```\n\n## Case Eight: Object.defineProperty 问题\n这个case 应该说是最难搞的一个case了，耗时也比较长，关键点在于使用 `es5-shim`/`es5-sham`也有问题，查看你官网发现在低版本浏览器也会有问题，官网描述如下：\n> ⚠️ Object.defineProperty\n> In the worst of circumstances, IE 8 provides a version of this method that only works on DOM objects. This sham will not be installed. The given version of defineProperty will throw an exception if used on non-DOM objects.\n> In slightly better circumstances, this method will silently fail to set \"writable\", \"enumerable\", and \"configurable\" properties.\n> Providing a getter or setter with \"get\" or \"set\" on a descriptor will silently fail on engines that lack \"defineGetter\" and \"defineSetter\", which include all versions of IE.\nhttps://github.com/es-shims/es5-shim/issues#issue/5\n\n那这个Object.defineProperty 是如何产生的呢，这个是babel编译后产生的，当我们在代码使用 `import` `export` ES6 Module时出现的，那你可能最直接的想法就是我不用ES6 Module了，改用Commonjs规范，OK，修改后编译，确实解决了问题，但是查看代码里还是有一段代码的，如下：\n```js\ne.d = function(t, n, r) {\n    e.o(t, n) || Object.defineProperty(t, n, {\n        \"configurable\": !1,\n        \"enumerable\": !0,\n        \"get\": r\n    });\n}, e.n = function(t) {\n    var n = t && t.__esModule ? function() {\n        return t[\"default\"];\n    } : function() {\n        return t;\n    };\n    return e.d(n, \"a\", n), n;\n}, e.o = function(t, e) {\n    return Object.prototype.hasOwnProperty.call(t, e);\n}\n```\n看代码已经做了容错判断。\n\n## Case Nine: Object.defineProperty 问题\n重新构建，加入 `json3` 处理 JSON 对象兼容时，代码在此处抛出了异常：\n```js\nvar hasGetter = 'get' in descriptor;\nvar hasSetter = 'set' in descriptor;\nif (!supportsAccessors && (hasGetter || hasSetter)) {\n    throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);\n}\n```\n分析supportsAccessors代码逻辑：\n```js\nvar supportsAccessors = owns(prototypeOfObject, '__defineGetter__');\n```\n通过断点调试，supportsAccessors值为false且hasGetter或者hasSetter时抛出了异常，也就是说当前js引擎不支持访问器属性，却在属性描述符中设置了get，set,那么就会抛出异常。查看 [defineGetter](“defineGetter”的兼容情况是只兼容IE11) 的兼容情况，只兼容IE11，虽然IE9、IE10同样不支持defineGetter,不过他们直接支持Object.defineProperty方法和get语法，无需sham，所以代码并不会走到异常这里。但是IE8以下就扯淡了。解决这种情况只能修改源代码了。\n\n至此，Webpack打包时，IE低版本浏览器(IE8及以下)遇到的兼容问题就总结这里，如果你有新的问题，欢迎留言。\n\n感谢您的阅读","source":"_posts/煦涵说Webpack-IE低版本兼容.md","raw":"---\ntitle: 煦涵说Webpack-IE低版本兼容\nauthor:\n   nick: 煦涵\n   github_name: zuojj\ndate: 2017-09-03 17:00\ncategories: 煦涵说\ntags: webpack\nthumb: http://www.zuojj.com/wp-content/uploads/2017/05/webpack1.jpg\n---\n\n[Webpack](https://webpack.js.org/)，Webpack 是一个前端资源加载/打包工具，现在版本已经 release 到 v2.6.1，今天的文章不支持介绍Webpack的API及使用，而是对最近项目开发中使用Webpack打包时处理IE低版本(IE8及以下)浏览器兼容问题做一次总结。\n\n![图片描述][1]\n\nPC端项目前端基础技术选型jQuery + ES6 + EJS + Babel + Webpack：\n* jQuery：提供选择器和ajax接口兼容支持；\n* ES6：跟进前端趋势，方便向后兼容；\n* EJS：提供前端模板引擎支持；\n* Babel：提供 ES6 转码支持；\n* Webpack: 提高前端资源加载/打包；\n\n项目开发过程都在 Chrome 浏览器中，一切都OK，没有任何问题，当在IE9以下浏览器中调试发现好多坑，现总结如下，以后新手参考。\n\n## Case One: `default` 、 `class`、`catch` ES3中保留字问题\n报错信息：\n```\nSCRIPT1048: 缺少标识符\n```\n对应代码：\n```js\ne.n = function (t) {\n    var n = t && t.__esModule ? function () {\n        return t.default\n    } : function () {\n        return t\n    };\n    return e.d(n, \"a\", n), n\n}\n```\n网上查找资料，webpack有一款loader插件[es3ify-loader](https://www.npmjs.com/package/es3ify-loader)来处理ES3的兼容问题，修改webpack配置，问题解决，添加规则如下：\n```js\nmodule: {\n    rules: [{\n            test: /.js$/,\n            enforce: 'post', // post-loader处理\n            loader: 'es3ify-loader'\n        }\n    ]\n}\n```\n这个loader是干啥用的捏，就是把这些保留字给你加上引号，使用字符串的形式引用，请看实例：\n```js\n// 编译前\nfunction(t) { return t.default; }\n\n// 编译后\nfunction(t) { return t[\"default\"]; }\n```\n\n## Case Two: uglify-js产生问题\n重新构建，在IE低版本浏览器预览，使用 `webpack.optimize.UglifyJsPlugin` 压缩时，又报上面同样的错误了，重新采用 beauty:true, build 发现引号被压缩掉了，究其原因，研究了下uglify-js默认配置，发现了 `compress.properties` 属性，增加build options如下，问题解决：\n```js\nnew webpack.optimize.UglifyJsPlugin({\n    compress: {\n        properties: false,\n        warnings: false\n    },\n    output: {\n        beautify: true\n    },\n    sourceMap: false\n})\n```\n\n## Case Three: uglify-js问题\n重新构建，在IE低版本浏览器预览，使用 `webpack.optimize.UglifyJsPlugin` 压缩时，又报上面同样的错误了，报错代码：\n```js\n{\n    catch: function (t) {\n        return this.then(null, t)\n    }\n}\n```\n继续查找uglify-js配置，发现 `output.quote_keys`，修改build options，问题解决：\n```js\nnew webpack.optimize.UglifyJsPlugin({\n    compress: {\n        properties: false,\n        warnings: false\n    },\n    output: {\n        beautify: true,\n        quote_keys: true\n    },\n    sourceMap: false\n}),\n```\n编译后：\n```js\n{\n    \"catch\": function(t) {\n        return this.then(null, t);\n    }\n}\n```\n## Case Four: uglify-js问题\n重新构建，在IE低版本浏览器预览，报错信息如下：\n```html\nSCRIPT3126: 无法设置未定义或 null 引用的属性\n```\n继续分析压缩后代码，发现还是uglify-js问题，其mangle 配置属性 `mangle.screw_ie8` 默认为 true， 什么意思捏，意思就是把支持IE8的代码clear掉，screw you => 去你的，修改压缩配置项，重新编译，问题解决：\n```js\nnew webpack.optimize.UglifyJsPlugin({\n    compress: {\n        properties: false,\n        warnings: false\n    },\n    output: {\n        beautify: true,\n        quote_keys: true\n    },\n    mangle: {\n        screw_ie8: false\n    },\n    sourceMap: false\n})\n```\n## Case Five: ES5的API兼容报错\n在 webpack 的 entry 入口文件top引入 `es5-shim` 问题解决\n```js\nrequire('es5-shim');\nrequire('es5-shim/es5-sham');\n```\n## Case Six: Console.log 问题\n在 webpack 的 entry 入口文件top引入 `console-polyfill` 问题解决\n```js\nrequire('console-polyfill');\n```\n\n## Case Seven: Promise 兼容\n在 webpack 的 entry 入口文件top引入 `es6-promise` 问题解决\n```js\nrequire('es6-promise');\n```\n\n## Case Eight: Object.defineProperty 问题\n这个case 应该说是最难搞的一个case了，耗时也比较长，关键点在于使用 `es5-shim`/`es5-sham`也有问题，查看你官网发现在低版本浏览器也会有问题，官网描述如下：\n> ⚠️ Object.defineProperty\n> In the worst of circumstances, IE 8 provides a version of this method that only works on DOM objects. This sham will not be installed. The given version of defineProperty will throw an exception if used on non-DOM objects.\n> In slightly better circumstances, this method will silently fail to set \"writable\", \"enumerable\", and \"configurable\" properties.\n> Providing a getter or setter with \"get\" or \"set\" on a descriptor will silently fail on engines that lack \"defineGetter\" and \"defineSetter\", which include all versions of IE.\nhttps://github.com/es-shims/es5-shim/issues#issue/5\n\n那这个Object.defineProperty 是如何产生的呢，这个是babel编译后产生的，当我们在代码使用 `import` `export` ES6 Module时出现的，那你可能最直接的想法就是我不用ES6 Module了，改用Commonjs规范，OK，修改后编译，确实解决了问题，但是查看代码里还是有一段代码的，如下：\n```js\ne.d = function(t, n, r) {\n    e.o(t, n) || Object.defineProperty(t, n, {\n        \"configurable\": !1,\n        \"enumerable\": !0,\n        \"get\": r\n    });\n}, e.n = function(t) {\n    var n = t && t.__esModule ? function() {\n        return t[\"default\"];\n    } : function() {\n        return t;\n    };\n    return e.d(n, \"a\", n), n;\n}, e.o = function(t, e) {\n    return Object.prototype.hasOwnProperty.call(t, e);\n}\n```\n看代码已经做了容错判断。\n\n## Case Nine: Object.defineProperty 问题\n重新构建，加入 `json3` 处理 JSON 对象兼容时，代码在此处抛出了异常：\n```js\nvar hasGetter = 'get' in descriptor;\nvar hasSetter = 'set' in descriptor;\nif (!supportsAccessors && (hasGetter || hasSetter)) {\n    throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);\n}\n```\n分析supportsAccessors代码逻辑：\n```js\nvar supportsAccessors = owns(prototypeOfObject, '__defineGetter__');\n```\n通过断点调试，supportsAccessors值为false且hasGetter或者hasSetter时抛出了异常，也就是说当前js引擎不支持访问器属性，却在属性描述符中设置了get，set,那么就会抛出异常。查看 [defineGetter](“defineGetter”的兼容情况是只兼容IE11) 的兼容情况，只兼容IE11，虽然IE9、IE10同样不支持defineGetter,不过他们直接支持Object.defineProperty方法和get语法，无需sham，所以代码并不会走到异常这里。但是IE8以下就扯淡了。解决这种情况只能修改源代码了。\n\n至此，Webpack打包时，IE低版本浏览器(IE8及以下)遇到的兼容问题就总结这里，如果你有新的问题，欢迎留言。\n\n感谢您的阅读","slug":"煦涵说Webpack-IE低版本兼容","published":1,"updated":"2017-09-29T15:28:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj86mtvrp000560wqaj00b1e9","content":"<p><a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"external\">Webpack</a>，Webpack 是一个前端资源加载/打包工具，现在版本已经 release 到 v2.6.1，今天的文章不支持介绍Webpack的API及使用，而是对最近项目开发中使用Webpack打包时处理IE低版本(IE8及以下)浏览器兼容问题做一次总结。</p>\n<p>![图片描述][1]</p>\n<p>PC端项目前端基础技术选型jQuery + ES6 + EJS + Babel + Webpack：</p>\n<ul>\n<li>jQuery：提供选择器和ajax接口兼容支持；</li>\n<li>ES6：跟进前端趋势，方便向后兼容；</li>\n<li>EJS：提供前端模板引擎支持；</li>\n<li>Babel：提供 ES6 转码支持；</li>\n<li>Webpack: 提高前端资源加载/打包；</li>\n</ul>\n<p>项目开发过程都在 Chrome 浏览器中，一切都OK，没有任何问题，当在IE9以下浏览器中调试发现好多坑，现总结如下，以后新手参考。</p>\n<h2 id=\"Case-One-default-、-class、catch-ES3中保留字问题\"><a href=\"#Case-One-default-、-class、catch-ES3中保留字问题\" class=\"headerlink\" title=\"Case One: default 、 class、catch ES3中保留字问题\"></a>Case One: <code>default</code> 、 <code>class</code>、<code>catch</code> ES3中保留字问题</h2><p>报错信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SCRIPT1048: 缺少标识符</div></pre></td></tr></table></figure></p>\n<p>对应代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">e.n = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">t</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> n = t &amp;&amp; t.__esModule ? <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> t.default</div><div class=\"line\">    &#125; : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> t</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> e.d(n, <span class=\"string\">\"a\"</span>, n), n</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>网上查找资料，webpack有一款loader插件<a href=\"https://www.npmjs.com/package/es3ify-loader\" target=\"_blank\" rel=\"external\">es3ify-loader</a>来处理ES3的兼容问题，修改webpack配置，问题解决，添加规则如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">    rules: [&#123;</div><div class=\"line\">            test: <span class=\"regexp\">/.js$/</span>,</div><div class=\"line\">            enforce: <span class=\"string\">'post'</span>, <span class=\"comment\">// post-loader处理</span></div><div class=\"line\">            loader: <span class=\"string\">'es3ify-loader'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个loader是干啥用的捏，就是把这些保留字给你加上引号，使用字符串的形式引用，请看实例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 编译前</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123; <span class=\"keyword\">return</span> t.default; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 编译后</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123; <span class=\"keyword\">return</span> t[<span class=\"string\">\"default\"</span>]; &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Case-Two-uglify-js产生问题\"><a href=\"#Case-Two-uglify-js产生问题\" class=\"headerlink\" title=\"Case Two: uglify-js产生问题\"></a>Case Two: uglify-js产生问题</h2><p>重新构建，在IE低版本浏览器预览，使用 <code>webpack.optimize.UglifyJsPlugin</code> 压缩时，又报上面同样的错误了，重新采用 beauty:true, build 发现引号被压缩掉了，究其原因，研究了下uglify-js默认配置，发现了 <code>compress.properties</code> 属性，增加build options如下，问题解决：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">    compress: &#123;</div><div class=\"line\">        properties: <span class=\"literal\">false</span>,</div><div class=\"line\">        warnings: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        beautify: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    sourceMap: <span class=\"literal\">false</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"Case-Three-uglify-js问题\"><a href=\"#Case-Three-uglify-js问题\" class=\"headerlink\" title=\"Case Three: uglify-js问题\"></a>Case Three: uglify-js问题</h2><p>重新构建，在IE低版本浏览器预览，使用 <code>webpack.optimize.UglifyJsPlugin</code> 压缩时，又报上面同样的错误了，报错代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">catch</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">t</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, t)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>继续查找uglify-js配置，发现 <code>output.quote_keys</code>，修改build options，问题解决：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">    compress: &#123;</div><div class=\"line\">        properties: <span class=\"literal\">false</span>,</div><div class=\"line\">        warnings: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        beautify: <span class=\"literal\">true</span>,</div><div class=\"line\">        quote_keys: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    sourceMap: <span class=\"literal\">false</span></div><div class=\"line\">&#125;),</div></pre></td></tr></table></figure></p>\n<p>编译后：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"catch\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, t);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Case-Four-uglify-js问题\"><a href=\"#Case-Four-uglify-js问题\" class=\"headerlink\" title=\"Case Four: uglify-js问题\"></a>Case Four: uglify-js问题</h2><p>重新构建，在IE低版本浏览器预览，报错信息如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SCRIPT3126: 无法设置未定义或 null 引用的属性</div></pre></td></tr></table></figure></p>\n<p>继续分析压缩后代码，发现还是uglify-js问题，其mangle 配置属性 <code>mangle.screw_ie8</code> 默认为 true， 什么意思捏，意思就是把支持IE8的代码clear掉，screw you =&gt; 去你的，修改压缩配置项，重新编译，问题解决：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">    compress: &#123;</div><div class=\"line\">        properties: <span class=\"literal\">false</span>,</div><div class=\"line\">        warnings: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        beautify: <span class=\"literal\">true</span>,</div><div class=\"line\">        quote_keys: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    mangle: &#123;</div><div class=\"line\">        screw_ie8: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    sourceMap: <span class=\"literal\">false</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"Case-Five-ES5的API兼容报错\"><a href=\"#Case-Five-ES5的API兼容报错\" class=\"headerlink\" title=\"Case Five: ES5的API兼容报错\"></a>Case Five: ES5的API兼容报错</h2><p>在 webpack 的 entry 入口文件top引入 <code>es5-shim</code> 问题解决<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'es5-shim'</span>);</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'es5-shim/es5-sham'</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"Case-Six-Console-log-问题\"><a href=\"#Case-Six-Console-log-问题\" class=\"headerlink\" title=\"Case Six: Console.log 问题\"></a>Case Six: Console.log 问题</h2><p>在 webpack 的 entry 入口文件top引入 <code>console-polyfill</code> 问题解决<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'console-polyfill'</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"Case-Seven-Promise-兼容\"><a href=\"#Case-Seven-Promise-兼容\" class=\"headerlink\" title=\"Case Seven: Promise 兼容\"></a>Case Seven: Promise 兼容</h2><p>在 webpack 的 entry 入口文件top引入 <code>es6-promise</code> 问题解决<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'es6-promise'</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"Case-Eight-Object-defineProperty-问题\"><a href=\"#Case-Eight-Object-defineProperty-问题\" class=\"headerlink\" title=\"Case Eight: Object.defineProperty 问题\"></a>Case Eight: Object.defineProperty 问题</h2><p>这个case 应该说是最难搞的一个case了，耗时也比较长，关键点在于使用 <code>es5-shim</code>/<code>es5-sham</code>也有问题，查看你官网发现在低版本浏览器也会有问题，官网描述如下：</p>\n<blockquote>\n<p>⚠️ Object.defineProperty<br>In the worst of circumstances, IE 8 provides a version of this method that only works on DOM objects. This sham will not be installed. The given version of defineProperty will throw an exception if used on non-DOM objects.<br>In slightly better circumstances, this method will silently fail to set “writable”, “enumerable”, and “configurable” properties.<br>Providing a getter or setter with “get” or “set” on a descriptor will silently fail on engines that lack “defineGetter” and “defineSetter”, which include all versions of IE.<br><a href=\"https://github.com/es-shims/es5-shim/issues#issue/5\" target=\"_blank\" rel=\"external\">https://github.com/es-shims/es5-shim/issues#issue/5</a></p>\n</blockquote>\n<p>那这个Object.defineProperty 是如何产生的呢，这个是babel编译后产生的，当我们在代码使用 <code>import</code> <code>export</code> ES6 Module时出现的，那你可能最直接的想法就是我不用ES6 Module了，改用Commonjs规范，OK，修改后编译，确实解决了问题，但是查看代码里还是有一段代码的，如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">e.d = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t, n, r</span>) </span>&#123;</div><div class=\"line\">    e.o(t, n) || <span class=\"built_in\">Object</span>.defineProperty(t, n, &#123;</div><div class=\"line\">        <span class=\"string\">\"configurable\"</span>: !<span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"string\">\"enumerable\"</span>: !<span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"string\">\"get\"</span>: r</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;, e.n = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> n = t &amp;&amp; t.__esModule ? <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> t[<span class=\"string\">\"default\"</span>];</div><div class=\"line\">    &#125; : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> t;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> e.d(n, <span class=\"string\">\"a\"</span>, n), n;</div><div class=\"line\">&#125;, e.o = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t, e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(t, e);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看代码已经做了容错判断。</p>\n<h2 id=\"Case-Nine-Object-defineProperty-问题\"><a href=\"#Case-Nine-Object-defineProperty-问题\" class=\"headerlink\" title=\"Case Nine: Object.defineProperty 问题\"></a>Case Nine: Object.defineProperty 问题</h2><p>重新构建，加入 <code>json3</code> 处理 JSON 对象兼容时，代码在此处抛出了异常：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hasGetter = <span class=\"string\">'get'</span> <span class=\"keyword\">in</span> descriptor;</div><div class=\"line\"><span class=\"keyword\">var</span> hasSetter = <span class=\"string\">'set'</span> <span class=\"keyword\">in</span> descriptor;</div><div class=\"line\"><span class=\"keyword\">if</span> (!supportsAccessors &amp;&amp; (hasGetter || hasSetter)) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(ERR_ACCESSORS_NOT_SUPPORTED);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>分析supportsAccessors代码逻辑：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> supportsAccessors = owns(prototypeOfObject, <span class=\"string\">'__defineGetter__'</span>);</div></pre></td></tr></table></figure></p>\n<p>通过断点调试，supportsAccessors值为false且hasGetter或者hasSetter时抛出了异常，也就是说当前js引擎不支持访问器属性，却在属性描述符中设置了get，set,那么就会抛出异常。查看 <a href=\"“defineGetter”的兼容情况是只兼容IE11\">defineGetter</a> 的兼容情况，只兼容IE11，虽然IE9、IE10同样不支持defineGetter,不过他们直接支持Object.defineProperty方法和get语法，无需sham，所以代码并不会走到异常这里。但是IE8以下就扯淡了。解决这种情况只能修改源代码了。</p>\n<p>至此，Webpack打包时，IE低版本浏览器(IE8及以下)遇到的兼容问题就总结这里，如果你有新的问题，欢迎留言。</p>\n<p>感谢您的阅读</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"external\">Webpack</a>，Webpack 是一个前端资源加载/打包工具，现在版本已经 release 到 v2.6.1，今天的文章不支持介绍Webpack的API及使用，而是对最近项目开发中使用Webpack打包时处理IE低版本(IE8及以下)浏览器兼容问题做一次总结。</p>\n<p>![图片描述][1]</p>\n<p>PC端项目前端基础技术选型jQuery + ES6 + EJS + Babel + Webpack：</p>\n<ul>\n<li>jQuery：提供选择器和ajax接口兼容支持；</li>\n<li>ES6：跟进前端趋势，方便向后兼容；</li>\n<li>EJS：提供前端模板引擎支持；</li>\n<li>Babel：提供 ES6 转码支持；</li>\n<li>Webpack: 提高前端资源加载/打包；</li>\n</ul>\n<p>项目开发过程都在 Chrome 浏览器中，一切都OK，没有任何问题，当在IE9以下浏览器中调试发现好多坑，现总结如下，以后新手参考。</p>\n<h2 id=\"Case-One-default-、-class、catch-ES3中保留字问题\"><a href=\"#Case-One-default-、-class、catch-ES3中保留字问题\" class=\"headerlink\" title=\"Case One: default 、 class、catch ES3中保留字问题\"></a>Case One: <code>default</code> 、 <code>class</code>、<code>catch</code> ES3中保留字问题</h2><p>报错信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SCRIPT1048: 缺少标识符</div></pre></td></tr></table></figure></p>\n<p>对应代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">e.n = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">t</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> n = t &amp;&amp; t.__esModule ? <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> t.default</div><div class=\"line\">    &#125; : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> t</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> e.d(n, <span class=\"string\">\"a\"</span>, n), n</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>网上查找资料，webpack有一款loader插件<a href=\"https://www.npmjs.com/package/es3ify-loader\" target=\"_blank\" rel=\"external\">es3ify-loader</a>来处理ES3的兼容问题，修改webpack配置，问题解决，添加规则如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">    rules: [&#123;</div><div class=\"line\">            test: <span class=\"regexp\">/.js$/</span>,</div><div class=\"line\">            enforce: <span class=\"string\">'post'</span>, <span class=\"comment\">// post-loader处理</span></div><div class=\"line\">            loader: <span class=\"string\">'es3ify-loader'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个loader是干啥用的捏，就是把这些保留字给你加上引号，使用字符串的形式引用，请看实例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 编译前</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123; <span class=\"keyword\">return</span> t.default; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 编译后</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123; <span class=\"keyword\">return</span> t[<span class=\"string\">\"default\"</span>]; &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Case-Two-uglify-js产生问题\"><a href=\"#Case-Two-uglify-js产生问题\" class=\"headerlink\" title=\"Case Two: uglify-js产生问题\"></a>Case Two: uglify-js产生问题</h2><p>重新构建，在IE低版本浏览器预览，使用 <code>webpack.optimize.UglifyJsPlugin</code> 压缩时，又报上面同样的错误了，重新采用 beauty:true, build 发现引号被压缩掉了，究其原因，研究了下uglify-js默认配置，发现了 <code>compress.properties</code> 属性，增加build options如下，问题解决：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">    compress: &#123;</div><div class=\"line\">        properties: <span class=\"literal\">false</span>,</div><div class=\"line\">        warnings: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        beautify: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    sourceMap: <span class=\"literal\">false</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"Case-Three-uglify-js问题\"><a href=\"#Case-Three-uglify-js问题\" class=\"headerlink\" title=\"Case Three: uglify-js问题\"></a>Case Three: uglify-js问题</h2><p>重新构建，在IE低版本浏览器预览，使用 <code>webpack.optimize.UglifyJsPlugin</code> 压缩时，又报上面同样的错误了，报错代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">catch</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">t</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, t)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>继续查找uglify-js配置，发现 <code>output.quote_keys</code>，修改build options，问题解决：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">    compress: &#123;</div><div class=\"line\">        properties: <span class=\"literal\">false</span>,</div><div class=\"line\">        warnings: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        beautify: <span class=\"literal\">true</span>,</div><div class=\"line\">        quote_keys: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    sourceMap: <span class=\"literal\">false</span></div><div class=\"line\">&#125;),</div></pre></td></tr></table></figure></p>\n<p>编译后：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"catch\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, t);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Case-Four-uglify-js问题\"><a href=\"#Case-Four-uglify-js问题\" class=\"headerlink\" title=\"Case Four: uglify-js问题\"></a>Case Four: uglify-js问题</h2><p>重新构建，在IE低版本浏览器预览，报错信息如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SCRIPT3126: 无法设置未定义或 null 引用的属性</div></pre></td></tr></table></figure></p>\n<p>继续分析压缩后代码，发现还是uglify-js问题，其mangle 配置属性 <code>mangle.screw_ie8</code> 默认为 true， 什么意思捏，意思就是把支持IE8的代码clear掉，screw you =&gt; 去你的，修改压缩配置项，重新编译，问题解决：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">    compress: &#123;</div><div class=\"line\">        properties: <span class=\"literal\">false</span>,</div><div class=\"line\">        warnings: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        beautify: <span class=\"literal\">true</span>,</div><div class=\"line\">        quote_keys: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    mangle: &#123;</div><div class=\"line\">        screw_ie8: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    sourceMap: <span class=\"literal\">false</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"Case-Five-ES5的API兼容报错\"><a href=\"#Case-Five-ES5的API兼容报错\" class=\"headerlink\" title=\"Case Five: ES5的API兼容报错\"></a>Case Five: ES5的API兼容报错</h2><p>在 webpack 的 entry 入口文件top引入 <code>es5-shim</code> 问题解决<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'es5-shim'</span>);</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'es5-shim/es5-sham'</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"Case-Six-Console-log-问题\"><a href=\"#Case-Six-Console-log-问题\" class=\"headerlink\" title=\"Case Six: Console.log 问题\"></a>Case Six: Console.log 问题</h2><p>在 webpack 的 entry 入口文件top引入 <code>console-polyfill</code> 问题解决<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'console-polyfill'</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"Case-Seven-Promise-兼容\"><a href=\"#Case-Seven-Promise-兼容\" class=\"headerlink\" title=\"Case Seven: Promise 兼容\"></a>Case Seven: Promise 兼容</h2><p>在 webpack 的 entry 入口文件top引入 <code>es6-promise</code> 问题解决<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'es6-promise'</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"Case-Eight-Object-defineProperty-问题\"><a href=\"#Case-Eight-Object-defineProperty-问题\" class=\"headerlink\" title=\"Case Eight: Object.defineProperty 问题\"></a>Case Eight: Object.defineProperty 问题</h2><p>这个case 应该说是最难搞的一个case了，耗时也比较长，关键点在于使用 <code>es5-shim</code>/<code>es5-sham</code>也有问题，查看你官网发现在低版本浏览器也会有问题，官网描述如下：</p>\n<blockquote>\n<p>⚠️ Object.defineProperty<br>In the worst of circumstances, IE 8 provides a version of this method that only works on DOM objects. This sham will not be installed. The given version of defineProperty will throw an exception if used on non-DOM objects.<br>In slightly better circumstances, this method will silently fail to set “writable”, “enumerable”, and “configurable” properties.<br>Providing a getter or setter with “get” or “set” on a descriptor will silently fail on engines that lack “defineGetter” and “defineSetter”, which include all versions of IE.<br><a href=\"https://github.com/es-shims/es5-shim/issues#issue/5\" target=\"_blank\" rel=\"external\">https://github.com/es-shims/es5-shim/issues#issue/5</a></p>\n</blockquote>\n<p>那这个Object.defineProperty 是如何产生的呢，这个是babel编译后产生的，当我们在代码使用 <code>import</code> <code>export</code> ES6 Module时出现的，那你可能最直接的想法就是我不用ES6 Module了，改用Commonjs规范，OK，修改后编译，确实解决了问题，但是查看代码里还是有一段代码的，如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">e.d = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t, n, r</span>) </span>&#123;</div><div class=\"line\">    e.o(t, n) || <span class=\"built_in\">Object</span>.defineProperty(t, n, &#123;</div><div class=\"line\">        <span class=\"string\">\"configurable\"</span>: !<span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"string\">\"enumerable\"</span>: !<span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"string\">\"get\"</span>: r</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;, e.n = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> n = t &amp;&amp; t.__esModule ? <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> t[<span class=\"string\">\"default\"</span>];</div><div class=\"line\">    &#125; : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> t;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> e.d(n, <span class=\"string\">\"a\"</span>, n), n;</div><div class=\"line\">&#125;, e.o = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t, e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(t, e);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看代码已经做了容错判断。</p>\n<h2 id=\"Case-Nine-Object-defineProperty-问题\"><a href=\"#Case-Nine-Object-defineProperty-问题\" class=\"headerlink\" title=\"Case Nine: Object.defineProperty 问题\"></a>Case Nine: Object.defineProperty 问题</h2><p>重新构建，加入 <code>json3</code> 处理 JSON 对象兼容时，代码在此处抛出了异常：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hasGetter = <span class=\"string\">'get'</span> <span class=\"keyword\">in</span> descriptor;</div><div class=\"line\"><span class=\"keyword\">var</span> hasSetter = <span class=\"string\">'set'</span> <span class=\"keyword\">in</span> descriptor;</div><div class=\"line\"><span class=\"keyword\">if</span> (!supportsAccessors &amp;&amp; (hasGetter || hasSetter)) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(ERR_ACCESSORS_NOT_SUPPORTED);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>分析supportsAccessors代码逻辑：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> supportsAccessors = owns(prototypeOfObject, <span class=\"string\">'__defineGetter__'</span>);</div></pre></td></tr></table></figure></p>\n<p>通过断点调试，supportsAccessors值为false且hasGetter或者hasSetter时抛出了异常，也就是说当前js引擎不支持访问器属性，却在属性描述符中设置了get，set,那么就会抛出异常。查看 <a href=\"“defineGetter”的兼容情况是只兼容IE11\">defineGetter</a> 的兼容情况，只兼容IE11，虽然IE9、IE10同样不支持defineGetter,不过他们直接支持Object.defineProperty方法和get语法，无需sham，所以代码并不会走到异常这里。但是IE8以下就扯淡了。解决这种情况只能修改源代码了。</p>\n<p>至此，Webpack打包时，IE低版本浏览器(IE8及以下)遇到的兼容问题就总结这里，如果你有新的问题，欢迎留言。</p>\n<p>感谢您的阅读</p>\n"},{"title":"煦涵说Yarn","author":{"nick":"煦涵","github_name":"zuojj"},"date":"2017-09-03T09:00:00.000Z","thumb":"http://www.zuojj.com/wp-content/uploads/2017/05/0.jpeg","_content":"\n[Yarn](https://yarnpkg.com)是一个新的Javascript包管理器，它由Facebook, Google, Exponent and Tilde开发者共同开发完成。Yarn 不是 NPM 的fork版本，而是它的重新设计，Yarn 定位为\"快速、可靠、安全的依赖管理工具\"，它的目标是解决团队开发中使用 NPM 遇到的问题。\n\n随着 Yarn 的诞生，越来越多的开发者转向了 Yarn，那么 NPM 在开发中有哪些问题，Yarn 是如何解决的呢？\nNPM 一些潜在的问题:\n* 嵌套依赖 (npm 3.0版本已修复)\n* 串行安装\n* 单一个 package 来源（npmjs.com）\n* 需要网络来安装软件包（尽管我们可以创建一个临时缓存）\n* 允许程序包在安装时运行代码（不利于安全性）\n* 不确定的包状态（不能确定项目的所有副本使用相同的包版本）\n\nYarn 解决方案:\n* 单依赖包结构: 可以使用单一版本的依赖包，安装更快速，占用磁盘空间更少\n* 并行安装: 并行下载依赖包，减少下载时间\n* 多个包来源: Yarn 读取和安装 npmjs.com 和 Bower安装包，如果有个渠道down掉了，可以从另一个渠道下载包并安装\n* 自动重试: 单个网络请求失败不会导致安装失败，请求在失败后会重试，这解决了由于临时网络问题而产生的构建异常\n* 兼容 NPM: 从 NPM 切换到 Yarn 不需要做特殊兼容处理\n* yarn.lock: 用来管理 javascript 包，这个对于开发团队来说可能是最有用的功能了。 在package.json中，依赖的包版本可以被指定为一个范围，也可以不带版本号。这个可能会导致一种问题，团队内不同开发人员使用不同版本的软件包。我们都知道，复现环境的能力与完全相关的依赖关系对于高校的调试和新团队人员的融入至关重要。从包管理器（Bundler）中借鉴，Yarn 创建了 yarn.lock文件，用来记录项目使用每个包的确切版本。当将此文件提交至 SVN、GIT 等代码维护工具，可以保证项目的所有开发人员共享一套依赖包的版本号。\n\n## Yarn 的安装\n```bash\nbrew install yarn\n\n/* Yarn 团队不推荐 */\nnpm install -g yarn \n```\n不同平台安装方式各异，具体参见[install](https://yarnpkg.com/zh-Hans/docs/install)\n\n## NPM CLI vs Yarn CLI\n\n* 初始化项目\n```bash\nnpm  init\nyarn init\n```\n* 从 package.json 安装依赖\n```bash\nnpm install\nyarn\n```\n* 安装指定包到依赖或者开发依赖\n```\nnpm install --save [package]\nyarn add [package]\n\nnpm install --save-dev [package]\nyarn add [package] [--dev/-D]\n```\n* 安装包到全局\n```bash\nnpm install --global [package]\nyarn global add [package]\n```\n* 安装指定版本的包\n```bash\nnpm install [package]@[version]\nyarn add [package]@[version]\n```\n* 重新下载所有包\n```bash\nnpm reubild\nyarn install --force\n```\n* 卸载包\n```bash\nnpm uninstall [package]\n\nnpm uninstall --save [package]\nyarn remove [package]\n\nnpm uninstall --save-dev [package]\n\n```\n* 升级包\n```bash\nrm -rf node_modules && npm install\nyarn upgrade\n```\n## 总结\n相比 NPM，Yarn解决了不确定依赖、网络问题、并行下载等问题。然而 NPM 是自己成功的牺牲品，随着越来越多的开发者转移使用 Yarn或者其他依赖平台，NPM 服务器可以更有效的使用。总之两个包管理器都很优秀，这种相互的关系，驱使着各自彼此往更优秀的方向前进，以惠及更多的开发者。\n\n\n感谢您的阅读\n","source":"_posts/煦涵说Yarn.md","raw":"---\ntitle: 煦涵说Yarn\nauthor:\n   nick: 煦涵\n   github_name: zuojj\ndate: 2017-09-03 17:00\ncategories: 煦涵说\ntags: yarn\nthumb: http://www.zuojj.com/wp-content/uploads/2017/05/0.jpeg\n---\n\n[Yarn](https://yarnpkg.com)是一个新的Javascript包管理器，它由Facebook, Google, Exponent and Tilde开发者共同开发完成。Yarn 不是 NPM 的fork版本，而是它的重新设计，Yarn 定位为\"快速、可靠、安全的依赖管理工具\"，它的目标是解决团队开发中使用 NPM 遇到的问题。\n\n随着 Yarn 的诞生，越来越多的开发者转向了 Yarn，那么 NPM 在开发中有哪些问题，Yarn 是如何解决的呢？\nNPM 一些潜在的问题:\n* 嵌套依赖 (npm 3.0版本已修复)\n* 串行安装\n* 单一个 package 来源（npmjs.com）\n* 需要网络来安装软件包（尽管我们可以创建一个临时缓存）\n* 允许程序包在安装时运行代码（不利于安全性）\n* 不确定的包状态（不能确定项目的所有副本使用相同的包版本）\n\nYarn 解决方案:\n* 单依赖包结构: 可以使用单一版本的依赖包，安装更快速，占用磁盘空间更少\n* 并行安装: 并行下载依赖包，减少下载时间\n* 多个包来源: Yarn 读取和安装 npmjs.com 和 Bower安装包，如果有个渠道down掉了，可以从另一个渠道下载包并安装\n* 自动重试: 单个网络请求失败不会导致安装失败，请求在失败后会重试，这解决了由于临时网络问题而产生的构建异常\n* 兼容 NPM: 从 NPM 切换到 Yarn 不需要做特殊兼容处理\n* yarn.lock: 用来管理 javascript 包，这个对于开发团队来说可能是最有用的功能了。 在package.json中，依赖的包版本可以被指定为一个范围，也可以不带版本号。这个可能会导致一种问题，团队内不同开发人员使用不同版本的软件包。我们都知道，复现环境的能力与完全相关的依赖关系对于高校的调试和新团队人员的融入至关重要。从包管理器（Bundler）中借鉴，Yarn 创建了 yarn.lock文件，用来记录项目使用每个包的确切版本。当将此文件提交至 SVN、GIT 等代码维护工具，可以保证项目的所有开发人员共享一套依赖包的版本号。\n\n## Yarn 的安装\n```bash\nbrew install yarn\n\n/* Yarn 团队不推荐 */\nnpm install -g yarn \n```\n不同平台安装方式各异，具体参见[install](https://yarnpkg.com/zh-Hans/docs/install)\n\n## NPM CLI vs Yarn CLI\n\n* 初始化项目\n```bash\nnpm  init\nyarn init\n```\n* 从 package.json 安装依赖\n```bash\nnpm install\nyarn\n```\n* 安装指定包到依赖或者开发依赖\n```\nnpm install --save [package]\nyarn add [package]\n\nnpm install --save-dev [package]\nyarn add [package] [--dev/-D]\n```\n* 安装包到全局\n```bash\nnpm install --global [package]\nyarn global add [package]\n```\n* 安装指定版本的包\n```bash\nnpm install [package]@[version]\nyarn add [package]@[version]\n```\n* 重新下载所有包\n```bash\nnpm reubild\nyarn install --force\n```\n* 卸载包\n```bash\nnpm uninstall [package]\n\nnpm uninstall --save [package]\nyarn remove [package]\n\nnpm uninstall --save-dev [package]\n\n```\n* 升级包\n```bash\nrm -rf node_modules && npm install\nyarn upgrade\n```\n## 总结\n相比 NPM，Yarn解决了不确定依赖、网络问题、并行下载等问题。然而 NPM 是自己成功的牺牲品，随着越来越多的开发者转移使用 Yarn或者其他依赖平台，NPM 服务器可以更有效的使用。总之两个包管理器都很优秀，这种相互的关系，驱使着各自彼此往更优秀的方向前进，以惠及更多的开发者。\n\n\n感谢您的阅读\n","slug":"煦涵说Yarn","published":1,"updated":"2017-09-29T15:27:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj86mtvrs000660wqbus6xa83","content":"<p><a href=\"https://yarnpkg.com\" target=\"_blank\" rel=\"external\">Yarn</a>是一个新的Javascript包管理器，它由Facebook, Google, Exponent and Tilde开发者共同开发完成。Yarn 不是 NPM 的fork版本，而是它的重新设计，Yarn 定位为”快速、可靠、安全的依赖管理工具”，它的目标是解决团队开发中使用 NPM 遇到的问题。</p>\n<p>随着 Yarn 的诞生，越来越多的开发者转向了 Yarn，那么 NPM 在开发中有哪些问题，Yarn 是如何解决的呢？<br>NPM 一些潜在的问题:</p>\n<ul>\n<li>嵌套依赖 (npm 3.0版本已修复)</li>\n<li>串行安装</li>\n<li>单一个 package 来源（npmjs.com）</li>\n<li>需要网络来安装软件包（尽管我们可以创建一个临时缓存）</li>\n<li>允许程序包在安装时运行代码（不利于安全性）</li>\n<li>不确定的包状态（不能确定项目的所有副本使用相同的包版本）</li>\n</ul>\n<p>Yarn 解决方案:</p>\n<ul>\n<li>单依赖包结构: 可以使用单一版本的依赖包，安装更快速，占用磁盘空间更少</li>\n<li>并行安装: 并行下载依赖包，减少下载时间</li>\n<li>多个包来源: Yarn 读取和安装 npmjs.com 和 Bower安装包，如果有个渠道down掉了，可以从另一个渠道下载包并安装</li>\n<li>自动重试: 单个网络请求失败不会导致安装失败，请求在失败后会重试，这解决了由于临时网络问题而产生的构建异常</li>\n<li>兼容 NPM: 从 NPM 切换到 Yarn 不需要做特殊兼容处理</li>\n<li>yarn.lock: 用来管理 javascript 包，这个对于开发团队来说可能是最有用的功能了。 在package.json中，依赖的包版本可以被指定为一个范围，也可以不带版本号。这个可能会导致一种问题，团队内不同开发人员使用不同版本的软件包。我们都知道，复现环境的能力与完全相关的依赖关系对于高校的调试和新团队人员的融入至关重要。从包管理器（Bundler）中借鉴，Yarn 创建了 yarn.lock文件，用来记录项目使用每个包的确切版本。当将此文件提交至 SVN、GIT 等代码维护工具，可以保证项目的所有开发人员共享一套依赖包的版本号。</li>\n</ul>\n<h2 id=\"Yarn-的安装\"><a href=\"#Yarn-的安装\" class=\"headerlink\" title=\"Yarn 的安装\"></a>Yarn 的安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install yarn</div><div class=\"line\"></div><div class=\"line\">/* Yarn 团队不推荐 */</div><div class=\"line\">npm install -g yarn</div></pre></td></tr></table></figure>\n<p>不同平台安装方式各异，具体参见<a href=\"https://yarnpkg.com/zh-Hans/docs/install\" target=\"_blank\" rel=\"external\">install</a></p>\n<h2 id=\"NPM-CLI-vs-Yarn-CLI\"><a href=\"#NPM-CLI-vs-Yarn-CLI\" class=\"headerlink\" title=\"NPM CLI vs Yarn CLI\"></a>NPM CLI vs Yarn CLI</h2><ul>\n<li><p>初始化项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm  init</div><div class=\"line\">yarn init</div></pre></td></tr></table></figure>\n</li>\n<li><p>从 package.json 安装依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div><div class=\"line\">yarn</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装指定包到依赖或者开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save [package]</div><div class=\"line\">yarn add [package]</div><div class=\"line\"></div><div class=\"line\">npm install --save-dev [package]</div><div class=\"line\">yarn add [package] [--dev/-D]</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装包到全局</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --global [package]</div><div class=\"line\">yarn global add [package]</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装指定版本的包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install [package]@[version]</div><div class=\"line\">yarn add [package]@[version]</div></pre></td></tr></table></figure>\n</li>\n<li><p>重新下载所有包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm reubild</div><div class=\"line\">yarn install --force</div></pre></td></tr></table></figure>\n</li>\n<li><p>卸载包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm uninstall [package]</div><div class=\"line\"></div><div class=\"line\">npm uninstall --save [package]</div><div class=\"line\">yarn remove [package]</div><div class=\"line\"></div><div class=\"line\">npm uninstall --save-dev [package]</div></pre></td></tr></table></figure>\n</li>\n<li><p>升级包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm -rf node_modules &amp;&amp; npm install</div><div class=\"line\">yarn upgrade</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>相比 NPM，Yarn解决了不确定依赖、网络问题、并行下载等问题。然而 NPM 是自己成功的牺牲品，随着越来越多的开发者转移使用 Yarn或者其他依赖平台，NPM 服务器可以更有效的使用。总之两个包管理器都很优秀，这种相互的关系，驱使着各自彼此往更优秀的方向前进，以惠及更多的开发者。</p>\n<p>感谢您的阅读</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://yarnpkg.com\" target=\"_blank\" rel=\"external\">Yarn</a>是一个新的Javascript包管理器，它由Facebook, Google, Exponent and Tilde开发者共同开发完成。Yarn 不是 NPM 的fork版本，而是它的重新设计，Yarn 定位为”快速、可靠、安全的依赖管理工具”，它的目标是解决团队开发中使用 NPM 遇到的问题。</p>\n<p>随着 Yarn 的诞生，越来越多的开发者转向了 Yarn，那么 NPM 在开发中有哪些问题，Yarn 是如何解决的呢？<br>NPM 一些潜在的问题:</p>\n<ul>\n<li>嵌套依赖 (npm 3.0版本已修复)</li>\n<li>串行安装</li>\n<li>单一个 package 来源（npmjs.com）</li>\n<li>需要网络来安装软件包（尽管我们可以创建一个临时缓存）</li>\n<li>允许程序包在安装时运行代码（不利于安全性）</li>\n<li>不确定的包状态（不能确定项目的所有副本使用相同的包版本）</li>\n</ul>\n<p>Yarn 解决方案:</p>\n<ul>\n<li>单依赖包结构: 可以使用单一版本的依赖包，安装更快速，占用磁盘空间更少</li>\n<li>并行安装: 并行下载依赖包，减少下载时间</li>\n<li>多个包来源: Yarn 读取和安装 npmjs.com 和 Bower安装包，如果有个渠道down掉了，可以从另一个渠道下载包并安装</li>\n<li>自动重试: 单个网络请求失败不会导致安装失败，请求在失败后会重试，这解决了由于临时网络问题而产生的构建异常</li>\n<li>兼容 NPM: 从 NPM 切换到 Yarn 不需要做特殊兼容处理</li>\n<li>yarn.lock: 用来管理 javascript 包，这个对于开发团队来说可能是最有用的功能了。 在package.json中，依赖的包版本可以被指定为一个范围，也可以不带版本号。这个可能会导致一种问题，团队内不同开发人员使用不同版本的软件包。我们都知道，复现环境的能力与完全相关的依赖关系对于高校的调试和新团队人员的融入至关重要。从包管理器（Bundler）中借鉴，Yarn 创建了 yarn.lock文件，用来记录项目使用每个包的确切版本。当将此文件提交至 SVN、GIT 等代码维护工具，可以保证项目的所有开发人员共享一套依赖包的版本号。</li>\n</ul>\n<h2 id=\"Yarn-的安装\"><a href=\"#Yarn-的安装\" class=\"headerlink\" title=\"Yarn 的安装\"></a>Yarn 的安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install yarn</div><div class=\"line\"></div><div class=\"line\">/* Yarn 团队不推荐 */</div><div class=\"line\">npm install -g yarn</div></pre></td></tr></table></figure>\n<p>不同平台安装方式各异，具体参见<a href=\"https://yarnpkg.com/zh-Hans/docs/install\" target=\"_blank\" rel=\"external\">install</a></p>\n<h2 id=\"NPM-CLI-vs-Yarn-CLI\"><a href=\"#NPM-CLI-vs-Yarn-CLI\" class=\"headerlink\" title=\"NPM CLI vs Yarn CLI\"></a>NPM CLI vs Yarn CLI</h2><ul>\n<li><p>初始化项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm  init</div><div class=\"line\">yarn init</div></pre></td></tr></table></figure>\n</li>\n<li><p>从 package.json 安装依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div><div class=\"line\">yarn</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装指定包到依赖或者开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save [package]</div><div class=\"line\">yarn add [package]</div><div class=\"line\"></div><div class=\"line\">npm install --save-dev [package]</div><div class=\"line\">yarn add [package] [--dev/-D]</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装包到全局</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --global [package]</div><div class=\"line\">yarn global add [package]</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装指定版本的包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install [package]@[version]</div><div class=\"line\">yarn add [package]@[version]</div></pre></td></tr></table></figure>\n</li>\n<li><p>重新下载所有包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm reubild</div><div class=\"line\">yarn install --force</div></pre></td></tr></table></figure>\n</li>\n<li><p>卸载包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm uninstall [package]</div><div class=\"line\"></div><div class=\"line\">npm uninstall --save [package]</div><div class=\"line\">yarn remove [package]</div><div class=\"line\"></div><div class=\"line\">npm uninstall --save-dev [package]</div></pre></td></tr></table></figure>\n</li>\n<li><p>升级包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm -rf node_modules &amp;&amp; npm install</div><div class=\"line\">yarn upgrade</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>相比 NPM，Yarn解决了不确定依赖、网络问题、并行下载等问题。然而 NPM 是自己成功的牺牲品，随着越来越多的开发者转移使用 Yarn或者其他依赖平台，NPM 服务器可以更有效的使用。总之两个包管理器都很优秀，这种相互的关系，驱使着各自彼此往更优秀的方向前进，以惠及更多的开发者。</p>\n<p>感谢您的阅读</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj86mtvrp000560wqaj00b1e9","category_id":"cj86mtvrj000260wqdbp78lep","_id":"cj86mtvry000a60wq6pyfvipk"},{"post_id":"cj86mtvr4000060wqkv1o3azi","category_id":"cj86mtvrj000260wqdbp78lep","_id":"cj86mtvrz000d60wqbj11xkip"},{"post_id":"cj86mtvrs000660wqbus6xa83","category_id":"cj86mtvrj000260wqdbp78lep","_id":"cj86mtvrz000f60wqnbxeklqu"},{"post_id":"cj86mtvrc000160wqqhptui0g","category_id":"cj86mtvrj000260wqdbp78lep","_id":"cj86mtvs6000h60wq4fwqnoiu"},{"post_id":"cj86mtvrn000460wqzjhmoiod","category_id":"cj86mtvrj000260wqdbp78lep","_id":"cj86mtvs6000j60wq7oynkdhd"}],"PostTag":[{"post_id":"cj86mtvr4000060wqkv1o3azi","tag_id":"cj86mtvrm000360wq55a3d3nl","_id":"cj86mtvrx000960wqcs7y0v6i"},{"post_id":"cj86mtvrc000160wqqhptui0g","tag_id":"cj86mtvru000860wq3dnlhmjs","_id":"cj86mtvrz000e60wqorlihndm"},{"post_id":"cj86mtvrn000460wqzjhmoiod","tag_id":"cj86mtvrz000c60wqyfs7x881","_id":"cj86mtvs6000i60wqrhpqyrfb"},{"post_id":"cj86mtvrp000560wqaj00b1e9","tag_id":"cj86mtvrz000g60wqnzhek9x3","_id":"cj86mtvs7000l60wqnb9iwm08"},{"post_id":"cj86mtvrs000660wqbus6xa83","tag_id":"cj86mtvs7000k60wq4fnizsd7","_id":"cj86mtvs7000m60wq1q47sd9t"}],"Tag":[{"name":"babel","_id":"cj86mtvrm000360wq55a3d3nl"},{"name":"flow","_id":"cj86mtvru000860wq3dnlhmjs"},{"name":"json","_id":"cj86mtvrz000c60wqyfs7x881"},{"name":"webpack","_id":"cj86mtvrz000g60wqnzhek9x3"},{"name":"yarn","_id":"cj86mtvs7000k60wq4fnizsd7"}]}}